// ################################################################################
// FILE       : SPELLtimer.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Timer mechanism
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_TIMER_H__
#define __SPELL_TIMER_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Project includes --------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_SYN/SPELLthread.H"
#include "SPELL_SYN/SPELLevent.H"

/** \addtogroup SPELL_SYN */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Timer listener
 **
 ** \par Description:
 **
 ** \par Usage:
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLtimerListener
{
public:
    virtual ~SPELLtimerListener() {};
    virtual bool timerCallback( unsigned long usecs ) = 0;
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Encapsulates a timer mechanism
 **
 ** \par Description:
 **
 ** \par Usage:
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLtimer : public SPELLthread
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /** Constructor.
    **////////////////////////////////////////////////////////////////////
    SPELLtimer( unsigned long usec, SPELLtimerListener& listener );

    //////////////////////////////////////////////////////////////////////
    /** Constructor.
    **////////////////////////////////////////////////////////////////////
    SPELLtimer( unsigned long usec, SPELLtimerListener& listener, unsigned long timeout );

    //////////////////////////////////////////////////////////////////////
    /** Destructor.
    **////////////////////////////////////////////////////////////////////
    ~SPELLtimer();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /** Timer algorithm
    **////////////////////////////////////////////////////////////////////
    void run();

    //////////////////////////////////////////////////////////////////////
    /** Cancel the timer
    **////////////////////////////////////////////////////////////////////
    void cancel();

    //////////////////////////////////////////////////////////////////////
    /** Stop the timer
    **////////////////////////////////////////////////////////////////////
    void stop();

    //////////////////////////////////////////////////////////////////////
    /** Continue the count after stop()
    **////////////////////////////////////////////////////////////////////
    void cont();

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /** Wait for the stop event
    **////////////////////////////////////////////////////////////////////
    void wait();

    //////////////////////////////////////////////////////////////////////
    /** Check if the timer is counting. Synchronized.
     *
     * \returns True if the timer is active.
    **////////////////////////////////////////////////////////////////////
    bool isCounting();

    //////////////////////////////////////////////////////////////////////
    /** Set wether the timer is counting. Synchronized.
    **////////////////////////////////////////////////////////////////////
    void setCounting( bool counting );

    //////////////////////////////////////////////////////////////////////
    /** Call the timer callback. Synchronized
     *
     * \returns True if the timer thread is to be terminated.
    **////////////////////////////////////////////////////////////////////
    bool callTimerCallback();

    //////////////////////////////////////////////////////////////////////
    /** Check timeout. Synchronized
     *
     * \returns True if the timer thread is to be terminated.
    **////////////////////////////////////////////////////////////////////
    bool checkTimeout();

    // DATA MEMBERS //////////////////////////////////////////////////////////
    // True if the timer is active.
    bool           m_counting;
    // Callback to be called on each period
    SPELLtimerListener& m_listener;
    // Timer period in usec
    unsigned long m_period;
    // Timer maximum cycles in usec (x times period)
    unsigned long m_timeout;
    // Elapsed time since timer started
    unsigned long m_elapsed;
    // Mutex for synchronization
    SPELLmutex    m_mutex;
    // Stop event
    SPELLevent    m_stopEvent;
};

/*@}*/
#endif
