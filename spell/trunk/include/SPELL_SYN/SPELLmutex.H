// ################################################################################
// FILE       : SPELLmutex.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Mutex mechanism
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_MUTEX_H__
#define __SPELL_MUTEX_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_SYN/SPELLmutexFactory.H"
// Project includes --------------------------------------------------------

/** \defgroup SPELL_SYN Synchronization (SPELL_SYN)
 *
 * The module SPELL_SYN provides classes that wrap the operating system
 * synchronization features into common SPELL classes. The current implementation
 * provides a GNU/Linux implementation (based on POSIX threads library) only,
 * but a Win32 implementation is foreseen.
 *
 * These framework wrappers include:
 *
 * - Mutex objects
 * - Threading
 * - Events and conditions to synchronize operations
 * - Simple timers
 * - Shared memory access (problably removed in future releases)
 *
 * */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Encapsulates a mutex mechanism.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLmutex
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLmutex()
		: m_impl( SPELLmutexFactory::createMutex() )
		{;};

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLmutex()
		{
			delete m_impl;
			m_impl = NULL;
		}

	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Lock the mutex
		**////////////////////////////////////////////////////////////////////
		void lock()
		{
			if (m_impl) m_impl->lock();
		}

		//////////////////////////////////////////////////////////////////////
		/** Try lock the mutex
		**////////////////////////////////////////////////////////////////////
		bool trylock()
		{
			if (m_impl) return m_impl->trylock();
			return false;
		}

		//////////////////////////////////////////////////////////////////////
		/** Unlock the mutex
		**////////////////////////////////////////////////////////////////////
		void unlock()
		{
			if (m_impl) m_impl->unlock();
		}

		//////////////////////////////////////////////////////////////////////
		/** Access the mutex implementation.
		 *
		 * \returns Reference to the mutex implementation
		**////////////////////////////////////////////////////////////////////
		SPELLmutexIF* getImpl()
		{
			return m_impl;
		}

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the mutex implementation */
		SPELLmutexIF* m_impl;
};

/*@}*/
#endif
