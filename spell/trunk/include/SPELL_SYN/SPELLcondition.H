// ################################################################################
// FILE       : SPELLcondition.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Condition mechanism wrapper
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_CONDITION_H__
#define __SPELL_CONDITION_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_SYN/SPELLconditionFactory.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_SYN */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Encapsulates a condition mechanism
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLcondition
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLcondition()
		: m_impl( SPELLconditionFactory::createCondition() )
		{;};

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLcondition() { delete m_impl; };

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Signal any waiting thread
		**////////////////////////////////////////////////////////////////////
		void signal()
		{
			m_impl->signal();
		}

		//////////////////////////////////////////////////////////////////////
		/** Wait for the condition to be signalled
		 *
		 * \param m INOUT: Mutex to be used in condition lock
		**////////////////////////////////////////////////////////////////////
		void wait( SPELLmutex* m )
		{
			m_impl->wait(m);
		}

		//////////////////////////////////////////////////////////////////////
		/** Wait for the condition to be signalled with a timeout
		 *
		 * \param m INOUT: Mutex to be used in condition lock
		 * \param timeout IN: timeout in seconds
		**////////////////////////////////////////////////////////////////////
		bool wait( SPELLmutex* m, unsigned long timeout )
		{
			return m_impl->wait(m,timeout);
		}

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the actual implementation of the condition */
    	SPELLconditionIF* m_impl;
};

/*@}*/
#endif
