// ################################################################################
// FILE       : SPELLthread.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Thread mechanism
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_THREAD_H__
#define __SPELL_THREAD_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_SYN/SPELLmutex.H"
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"

/** \addtogroup SPELL_SYN */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Encapsulates a thread mechanism
 **
 ** \par Description: thread mechanism wrapper. The implementation is platform
 ** dependent.
 **
 ** \par Usage: active object may be easily created by inheriting from this
 ** class and implementing the run() method.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLthread
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /** Constructor.
    **////////////////////////////////////////////////////////////////////
    SPELLthread( std::string id );

    //////////////////////////////////////////////////////////////////////
    /** Destructor
    **////////////////////////////////////////////////////////////////////
    virtual ~SPELLthread();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /** Get thread id
    **////////////////////////////////////////////////////////////////////
    std::string getThreadId() {
        return m_threadId;
    };

    //////////////////////////////////////////////////////////////////////
    /** Start the thread
    **////////////////////////////////////////////////////////////////////
    void start();

    //////////////////////////////////////////////////////////////////////
    /** Block the caller until the thread has finished
    **////////////////////////////////////////////////////////////////////
    void join();

    //////////////////////////////////////////////////////////////////////
    /** Thread work implementation
    **////////////////////////////////////////////////////////////////////
    virtual void run() = 0;

    //////////////////////////////////////////////////////////////////////
    /** Launcher of the implemented thread
    **////////////////////////////////////////////////////////////////////
    void doRun();

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

    void setRunning( bool running );
    bool isRunning();

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
    // Thread identifier
    std::string m_threadId;
    // Holds the thread structure
    pthread_t m_thread;
    // Sync mutex
    SPELLmutex m_lock;
    // True if running
    bool m_running;
};

/*@}*/
#endif
