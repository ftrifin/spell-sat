// ################################################################################
// FILE       : SPELLipcMessage.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Definition of IPC message
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_IPC_MESSAGE_H__
#define __SPELL_IPC_MESSAGE_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_IPC/SPELLipc.H"
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLutils.H"

/** \addtogroup SPELL_IPC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////
#define COMPRESSION_FLAG_FALSE     '\1'
#define COMPRESSION_FLAG_TRUE      '\2'
#define COMPRESSION_FLAG_FALSE_STR "\1"
#define COMPRESSION_FLAG_TRUE_STR  "\2"

#define VOID_MESSAGE SPELLipcMessage("<void>")

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief SPELL message definition
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcMessage
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
		/** Shortcut for property map */
		typedef std::map<std::string,std::string> Properties;
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage();

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param id IN: identifier of the message.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage( std::string id );

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage( SPELLipcMessage* msg );

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param id IN: identifier of the message.
		 * \param properties IN: initial property values.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage( std::string id, Properties properties );

		//////////////////////////////////////////////////////////////////////
		/** Assignment operator
		 *
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage& operator=( const SPELLipcMessage& copy );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLipcMessage();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Set the key of the associated peer,
		 *
		 * \param key IN: the key of the peer.
		**////////////////////////////////////////////////////////////////////
		void setKey( int key ) {
			m_key = key;
		};

		//////////////////////////////////////////////////////////////////////
		/** Set the sequence number.
		 *
		 * \param seq IN: the sequence number.
		**////////////////////////////////////////////////////////////////////
		void setSequence( int seq ) {
			m_sequence = seq;
		};

		//////////////////////////////////////////////////////////////////////
		/** Set the sender identifier.
		 *
		 * \param sender IN: sender identifier.
		**////////////////////////////////////////////////////////////////////
		void setSender( std::string sender ) {
			m_senderId = sender;
		};

		//////////////////////////////////////////////////////////////////////
		/** Set the receiver identifier.
		 *
		 * \param receiver IN: receiver identifier.
		**////////////////////////////////////////////////////////////////////
		void setReceiver( std::string receiver ) {
			m_receiverId = receiver;
		};

		//////////////////////////////////////////////////////////////////////
		/** Set the message identifier.
		 *
		 * \param id IN: message identifier.
		**////////////////////////////////////////////////////////////////////
		void setId( std::string id ) {
			m_id = id;
		};

		//////////////////////////////////////////////////////////////////////
		/** Set the message compressed flag.
		 *
		 * \param id IN: message encoding.
		**////////////////////////////////////////////////////////////////////
		void setCompressed( bool compressed );

		//////////////////////////////////////////////////////////////////////
		/** Set the message type.
		 *
		 * \param type IN: message type.
		**////////////////////////////////////////////////////////////////////
		void setType( SPELLipcMessageType type ) {
			m_type = type;
		};

		//////////////////////////////////////////////////////////////////////
		/** Obtain the message peer key.
		 *
		 * \returns The peer key.
		**////////////////////////////////////////////////////////////////////
		int getKey() const {
			return m_key;
		};

		//////////////////////////////////////////////////////////////////////
		/** Obtain the message sequence number.
		 *
		 * \returns The sequence number.
		**////////////////////////////////////////////////////////////////////
		long getSequence() const {
			return m_sequence;
		};

		//////////////////////////////////////////////////////////////////////
		/** Obtain the message sequence number as a string.
		 *
		 * \returns The sequence number as a string.
		**////////////////////////////////////////////////////////////////////
		std::string getSequenceStr() const {
			return ISTR(m_sequence);
		};

		//////////////////////////////////////////////////////////////////////
		/** Obtain the message sender identifier.
		 *
		 * \returns The sender identifier.
		**////////////////////////////////////////////////////////////////////
		std::string getSender() const {
			return m_senderId;
		};

		//////////////////////////////////////////////////////////////////////
		/** Obtain the message receiver identifier.
		 *
		 * \returns The receiver identifier.
		**////////////////////////////////////////////////////////////////////
		std::string getReceiver() const {
			return m_receiverId;
		};

		//////////////////////////////////////////////////////////////////////
		/** Obtain the message identifier.
		 *
		 * \returns The message identifier.
		**////////////////////////////////////////////////////////////////////
		std::string getId() const {
			return m_id;
		}

		//////////////////////////////////////////////////////////////////////
		/** Obtain the message compressed flag.
		 *
		 * \returns The compressed flag.
		**////////////////////////////////////////////////////////////////////
		bool getCompressed() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the message type.
		 *
		 * \returns The message type.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessageType getType() const {
			return m_type;
		}

		//////////////////////////////////////////////////////////////////////
		/** Set the value of a message field.
		 *
		 * \param key IN: message field name
		 * \param value IN: message field value.
		**////////////////////////////////////////////////////////////////////
		void set( std::string key, std::string value );

		//////////////////////////////////////////////////////////////////////
		/** Set the value of a message field with raw data.
		 *
		 * \param key IN: message field name
		 * \param value IN: raw data
		**////////////////////////////////////////////////////////////////////
		void set( std::string key, const std::vector<BYTE>& vec );
		
		//////////////////////////////////////////////////////////////////////
		/** Set the value of a message field with raw data.
		 *
		 * \param key IN: message field name
		 * \param value IN: raw data
		**////////////////////////////////////////////////////////////////////
        void set( std::string key, const std::string::iterator& startPos, const std::string::iterator& endPos);

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of a message field.
		 *
		 * \param key IN: message field name
		 *
		 * \returns The message field value or empty string if there is no
		 * such field.
		**////////////////////////////////////////////////////////////////////
		std::string get( std::string key ) const;
		std::string& getRef( std::string key );

		//////////////////////////////////////////////////////////////////////
		/** Check if the given field does exist in the message.
		 *
		 * \returns True if the field exists.
		**////////////////////////////////////////////////////////////////////
		bool hasField( std::string field ) const;

		//////////////////////////////////////////////////////////////////////
		/** Convert the message data to a string.
		 *
		 * \returns The converted string.
		**////////////////////////////////////////////////////////////////////
		std::string data() const;

		//////////////////////////////////////////////////////////////////////
		/** Convert the message data to a string, not for IPC transmission
		 *
		 * \returns The converted string.
		**////////////////////////////////////////////////////////////////////
		std::string dataStr() const;

		//////////////////////////////////////////////////////////////////////
		/** Build the message data from a string.
		 *
		 * \param data IN: string containing the message data.
		**////////////////////////////////////////////////////////////////////
		void fromData( std::string data );

		//////////////////////////////////////////////////////////////////////
		/** Serialize a key, value pair
		 *
		 * \returns The serialized pair
		**////////////////////////////////////////////////////////////////////
        std::string dataItem(const std::string&, const std::string&) const;

		//////////////////////////////////////////////////////////////////////
		/** Build unique request identifier
		 *
		 * \returns The identifier
		**////////////////////////////////////////////////////////////////////
        std::string requestId() const;

		//////////////////////////////////////////////////////////////////////
		/** Build unique response identifier
		 *
		 * \returns The identifier
		**////////////////////////////////////////////////////////////////////
        std::string responseId() const;

		//////////////////////////////////////////////////////////////////////
		/** Check void message
		**////////////////////////////////////////////////////////////////////
        bool isVoid() { return m_id == "<void>"; };

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the message fields */
		Properties m_properties;
		/** Holds the peer key */
		int m_key;
		/** Holds the sequence number */
		long m_sequence;
		/** Holds the sender identifier */
		std::string m_senderId;
		/** Holds the receiver identifier */
		std::string m_receiverId;
		/** Holds the message type */
		SPELLipcMessageType m_type;
		/** Holds the message identifier */
		std::string m_id;
		/** Holds the message compressed flag */
		bool m_compressed;
};

/*@}*/
#endif
