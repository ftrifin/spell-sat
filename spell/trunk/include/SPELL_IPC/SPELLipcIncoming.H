// ################################################################################
// FILE       : SPELLipcIncoming.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Handler for incoming IPC messages
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_IPC_INCOMING_H__
#define __SPELL_IPC_INCOMING_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_IPC/SPELLipcInterfaceListener.H"
// Project includes --------------------------------------------------------
#include "SPELL_SYN/SPELLthread.H"
#include "SPELL_SYN/SPELLevent.H"
#include "SPELL_SYN/SPELLthreadWork.H"


/** \addtogroup SPELL_IPC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
class SPELLipcInterface;
class SPELLipcOutput;
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Incoming request handler - base implementation.
 **
 ** \par Description and usage:
 **
 ** 	Base class of the incoming message/request handlers.
 **
 ** \see SPELLipcIncomingMessage, SPELLipcIncomingRequest
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcIncomingBase: public SPELLthread
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param msgId IN: unique identifier for the message/request.
		 * \param msg IN: the message itself.
		 * \param listener IN: IPC listener to be notified.
		**////////////////////////////////////////////////////////////////////
		SPELLipcIncomingBase( const std::string& msgId,
							  const std::string& ifcName, SPELLipcMessage msg,
							  SPELLipcInterfaceListener& listener );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLipcIncomingBase();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the associated message identifier.
		 *
		 * \return The message identifier
		**////////////////////////////////////////////////////////////////////
		std::string getProcessingId();

		//////////////////////////////////////////////////////////////////////
		/** Obtain the associated message sequence
		 *
		 * \return The message sequence
		**////////////////////////////////////////////////////////////////////
		std::string getSequence();

		//////////////////////////////////////////////////////////////////////
		/** Obtain the associated message key.
		 *
		 * \return The message identifier
		**////////////////////////////////////////////////////////////////////
		int getKey();

		//////////////////////////////////////////////////////////////////////
		/** Ifc name
		**////////////////////////////////////////////////////////////////////
		std::string getIfcName() { return m_ifcName; };

		//////////////////////////////////////////////////////////////////////
		/** Thread main method.
		**////////////////////////////////////////////////////////////////////
		virtual void run() = 0;

		//////////////////////////////////////////////////////////////////////
		/** Cancel processor
		**////////////////////////////////////////////////////////////////////
		void cancel();

		//////////////////////////////////////////////////////////////////////
		/** Wait processing started
		**////////////////////////////////////////////////////////////////////
		void waitStarted();

		//////////////////////////////////////////////////////////////////////
		/** Check cancelled
		**////////////////////////////////////////////////////////////////////
		bool isFinished();

		//////////////////////////////////////////////////////////////////////
		/** Check processing started
		**////////////////////////////////////////////////////////////////////
		bool isStarted();

		//////////////////////////////////////////////////////////////////////
		/** Wait processor to finish.
		 *
		 * \param timeoutSec IN: maximum amount of milliseconds to wait
		 *
		 * \return True if there was a timeout
		**////////////////////////////////////////////////////////////////////
		bool wait( long timeoutMSec );

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Get the listener
		**////////////////////////////////////////////////////////////////////
		SPELLipcInterfaceListener& getListener();

		//////////////////////////////////////////////////////////////////////
		/** Get the message
		**////////////////////////////////////////////////////////////////////
		const SPELLipcMessage& getMessage();

		//////////////////////////////////////////////////////////////////////
		/** Set the finished flag
		**////////////////////////////////////////////////////////////////////
		void setFinished();

		//////////////////////////////////////////////////////////////////////
		/** Set finished event
		**////////////////////////////////////////////////////////////////////
		void finish();

		//////////////////////////////////////////////////////////////////////
		/** Set started event
		**////////////////////////////////////////////////////////////////////
		void setStarted();

    // DATA MEMBERS //////////////////////////////////////////////////////////


private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the name of the associated interface */
		std::string m_ifcName;
		/** Holds the identifier of the message being processed */
		std::string m_processingId;
		/** Holds the listener to be notified */
		SPELLipcInterfaceListener& m_listener;
		/** The message to be processed */
		const SPELLipcMessage m_message;
		/** Event set when the processing finishes */
		SPELLevent m_processingFinishEvent;
		/** Event set when the processing starts */
		SPELLevent m_processingStartEvent;
		/** Message key */
		int m_key;
		/** Started flag */
		bool m_started;
		/** Finished flag */
		bool m_finished;
		/** Data lock */
		SPELLmutex m_dataLock;
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Incoming message handler
 **
 ** \par Description and usage:
 **
 ** 	Handler for oneway messages. Created by IPC interface to manage
 ** 	incoming messages (oneway) and notify the IPC listener.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcIncomingMessage: public SPELLipcIncomingBase
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 *
		 * \param msgId IN: unique identifier for the message/request.
		 * \param msg IN: the message itself.
		 * \param listener IN: IPC listener to be notified.
		**////////////////////////////////////////////////////////////////////
		SPELLipcIncomingMessage( const std::string& msgId,
								 const std::string& ifcName,
								 SPELLipcMessage msg,
								 SPELLipcInterfaceListener& listener );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLipcIncomingMessage();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Thread main method.
		**////////////////////////////////////////////////////////////////////
		void run();

};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Incoming request handler
 **
 ** \par Description and usage:
 **
 ** 	Request (synchronous) handler. Created by IPC interface to manage
 ** 	incoming requests and notify the IPC listener.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcIncomingRequest: public SPELLipcIncomingBase
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES ////////////////////////////////// + msg.getId()///////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 *
		 * \param requestId IN: unique identifier for the message/request.
		 * \param msg IN: the message itself.
		 * \param listener IN: IPC listener to be notified.
		 * \param ifc IN: parent IPC interface.
		**////////////////////////////////////////////////////////////////////
		SPELLipcIncomingRequest( const std::string& requestId,
								 const std::string& ifcName,
								 SPELLipcMessage msg,
								 SPELLipcOutput& writer,
								 SPELLipcInterfaceListener& listener );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLipcIncomingRequest();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Thread main method.
		**////////////////////////////////////////////////////////////////////
		void run();

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the writer to use to send the response */
		SPELLipcOutput& m_writer;
};

/*@}*/
#endif
