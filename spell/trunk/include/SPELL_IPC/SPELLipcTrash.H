// ################################################################################
// FILE       : SPELLipcTrash.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Cleaner for obsolete requests
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_IPC_TRASH_H__
#define __SPELL_IPC_TRASH_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_IPC/SPELLipcMessage.H"
#include "SPELL_IPC/SPELLipcIncoming.H"
// Project includes --------------------------------------------------------


/** \addtogroup SPELL_IPC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
class SPELLipcIncomingBase;
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Message processor cleaner
 **
 ** \par Description and usage:
 **
 ** 	This class is in charge of deleting old message handlers.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcTrash : public SPELLthread
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param name IN: thread name.
		**////////////////////////////////////////////////////////////////////
		SPELLipcTrash( const std::string& name );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLipcTrash();

	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Shutdown this component.
		**////////////////////////////////////////////////////////////////////
		void shutdown();

		//////////////////////////////////////////////////////////////////////
		/** Cancel all requests pending corresponding to the given client
		**////////////////////////////////////////////////////////////////////
		void cancelAndCleanRequests( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** Get number of requests pending corresponding to the given client
		**////////////////////////////////////////////////////////////////////
		int getNumRequests( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** Place a handler ready to be cleaned up.
		 *
		 * \param msg IN: handler to be deleted when possible.
		**////////////////////////////////////////////////////////////////////
		void place( SPELLipcIncomingBase* msg );

		//////////////////////////////////////////////////////////////////////
		/** Main thread method.
		**////////////////////////////////////////////////////////////////////
		void run();

		//////////////////////////////////////////////////////////////////////
		/** Get number of processing threads in the trash
		**////////////////////////////////////////////////////////////////////
		unsigned int size();

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
		/** Shortcut for handler list */
		typedef std::list<SPELLipcIncomingBase*> SPELLipcTrashList;
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Check if the thread is running.
		 *
		 * \returns True if the thread is running.
		**////////////////////////////////////////////////////////////////////
		bool isWorking();

		//////////////////////////////////////////////////////////////////////
		/** Check if there are handlers to be deleted.
		 *
		 * \returns True if there are handlers in the list.
		**////////////////////////////////////////////////////////////////////
		bool haveData();

		//////////////////////////////////////////////////////////////////////
		/** Clear the list of handlers.
		**////////////////////////////////////////////////////////////////////
		void clearData();

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** List of handlers to be cleaned */
		SPELLipcTrashList    m_messages;
		/** True if processing */
		bool                 m_trashWorking;
		/** Synchronization lock */
		SPELLmutex           m_dataLock;
		SPELLevent           m_trashFinishEvent;
		std::string          m_ifcName;
};

/*@}*/
#endif
