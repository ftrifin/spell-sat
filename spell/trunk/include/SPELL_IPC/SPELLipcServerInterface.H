// ################################################################################
// FILE       : SPELLipcServerInterface.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Interface for servers
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_IPC_SINTERFACE_H__
#define __SPELL_IPC_SINTERFACE_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_IPC/SPELLipcInterface.H"
#include "SPELL_IPC/SPELLipcClientInfo.H"
// Project includes --------------------------------------------------------


/** \addtogroup SPELL_IPC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief IPC server interface
 **
 ** \par Description and usage:
 **
 ** 	IPC interface used to communicate with several clients.
 **
 ** 	Once the instance is created, it has to be initialized with
 ** 	the IPC listener (to receive incoming messages). Then, the interface
 ** 	can be connected and starts waiting for clients to come in. sendXXX
 ** 	methods can be used to send messages and requests to the desired peer,
 ** 	identified by its IPC key.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcServerInterface : public SPELLipcInterface
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param name IN: name of the interface.
		 * \param key IN: assigned IPC key.
		 * \param port IN: port to listent to.
		**////////////////////////////////////////////////////////////////////
		SPELLipcServerInterface( std::string name, int key, int port );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLipcServerInterface();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void connectIfc();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void disconnect( bool send_eoc );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void disconnect( int peerKey, bool send_eoc );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void connectionClosed( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void connectionLost( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void run();

		//////////////////////////////////////////////////////////////////////
		/** Obtain the connection port
		 **///////////////////////////////////////////////////////////////////
		int getPort() {
			return m_serverPort;
		};

		//////////////////////////////////////////////////////////////////////
		/** Send a message to the given peer.
		 *
		 * \param peerKey IN: peer IPC key.
		 * \param msg IN: message to be sent.
		**////////////////////////////////////////////////////////////////////
		void sendMessage( int peerKey, SPELLipcMessage* msg );

		//////////////////////////////////////////////////////////////////////
		/** Send a request to the given peer.
		 *
		 * \param peerKey IN: peer IPC key.
		 * \param msg IN: request to be sent.
		 * \param timeoutSec IN: timeout in seconds for the response
		 *
		 * \returns The request response.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage* sendRequest( int peerKey, SPELLipcMessage* msg, unsigned long timeoutSec );

		//////////////////////////////////////////////////////////////////////
		/** See sendRequest method. The difference here is that the message
		 * is sent to the peer as-is, instead of manipulating the sender
		 * and receiver identifiers.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage* forwardRequest( int peerKey, SPELLipcMessage* msg, unsigned long timeoutSec );

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
		/** Map of clients indexed by IPC keys */
		typedef std::map<int,SPELLipcClientInfo*> SPELLipcClientMap;
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		SPELLipcOutput& getWriter( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		SPELLipcInput& getReader( int peerKey );

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Check if the given key corresponds to an active client.
		 *
		 * \param key IN: peer IPC key.
		 *
		 * \returns True if such a client is available.
		**////////////////////////////////////////////////////////////////////
		bool hasClient( int key );

		//////////////////////////////////////////////////////////////////////
		/** Add a client to the list of connected clients.
		 *
		 * \param key IN: key associated with the client
		 * \param skt IN: corresponding socket.
		**////////////////////////////////////////////////////////////////////
		void addClient( int key, SPELLsocket* skt );

		//////////////////////////////////////////////////////////////////////
		/** Remove a client of the list of connected clients and disconnect
		 * it.
		 *
		 * \param key IN: peer key.
		 * \param send_eoc IN: if true, send the EOC message before disconnect.
		**////////////////////////////////////////////////////////////////////
		void removeClient( int key, bool send_eoc );

		//////////////////////////////////////////////////////////////////////
		/** Write the given key to the socket channel
		 *
		 * \param key IN: peer key.
		 * \param skt IN: client socket
		**////////////////////////////////////////////////////////////////////
		void writeKey( int key, SPELLsocket* skt );

    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the last client key used */
		int m_lastClientKey;
		/** Holds the server key */
		int m_serverKey;
		/** Holds the server port */
		int m_serverPort;
		/** Holds the listening socket file descriptor */
		SPELLsocket* m_socket;
		/** Holds the list of connected clients */
		SPELLipcClientMap m_clients;
};

/*@}*/
#endif
