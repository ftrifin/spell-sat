// ################################################################################
// FILE       : SPELLipcServerInterface.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Interface for servers
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_IPC_SINTERFACE_H__
#define __SPELL_IPC_SINTERFACE_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_IPC/SPELLipcInterface.H"
#include "SPELL_IPC/SPELLipcChannel.H"
// Project includes --------------------------------------------------------
#include "SPELL_SYN/SPELLevent.H"


/** \addtogroup SPELL_IPC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief IPC server interface
 **
 ** \par Description and usage:
 **
 ** 	IPC interface used to communicate with several clients.
 **
 ** 	Once the instance is created, it has to be initialized with
 ** 	the IPC listener (to receive incoming messages). Then, the interface
 ** 	can be connected and starts waiting for clients to come in. sendXXX
 ** 	methods can be used to send messages and requests to the desired peer,
 ** 	identified by its IPC key.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcServerInterface : public SPELLipcInterface
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param name IN: name of the interface.
		 * \param key IN: assigned IPC key.
		 * \param port IN: port to listent to.
		**////////////////////////////////////////////////////////////////////
		SPELLipcServerInterface( const std::string& name, int key, int port );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLipcServerInterface();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void initialize( SPELLipcInterfaceListener* listener );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void removeListener();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void connect( bool reconnect = false );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void disconnect();

		//////////////////////////////////////////////////////////////////////
		/** Disconnect the channel for a given client
		**////////////////////////////////////////////////////////////////////
		void disconnectClient( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void connectionLost( int peerKey, int errNo, const std::string& reason );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void connectionClosed( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void run();

		//////////////////////////////////////////////////////////////////////
		/** Obtain the connection port
		 **///////////////////////////////////////////////////////////////////
		int getPort() {
			return m_serverPort;
		};

		//////////////////////////////////////////////////////////////////////
		/** Send a message to the given peer.
		 *
		 * \param peerKey IN: peer IPC key.
		 * \param msg IN: message to be sent.
		**////////////////////////////////////////////////////////////////////
		void sendMessage( int peerKey, SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** Send a request to the given peer.
		 *
		 * \param peerKey IN: peer IPC key.
		 * \param msg IN: request to be sent.
		 * \param timeoutMsec IN: timeout in milliseconds for the response
		 *
		 * \returns The request response.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage sendRequest( int peerKey, SPELLipcMessage& msg, unsigned long timeoutMsec );

		//////////////////////////////////////////////////////////////////////
		/** Check if the given key corresponds to an active client.
		 *
		 * \param key IN: peer IPC key.
		 *
		 * \returns True if such a client is available.
		**////////////////////////////////////////////////////////////////////
		bool hasClient( int key );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void incomingMessage( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void incomingRequest( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void incomingResponse( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		bool isConnected() { return m_connected; };

		//////////////////////////////////////////////////////////////////////
		/** Cancel outgoing requests for a given client
		**////////////////////////////////////////////////////////////////////
		void cancelOutgoingRequests( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** Cancel incoming requests from a given client
		**////////////////////////////////////////////////////////////////////
		void cancelIncomingRequests( int peerKey );

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
		/** Map of clients indexed by IPC keys */
		typedef std::map<int,SPELLipcChannel*> SPELLipcChannelMap;
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void setReady();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void waitReady();

		//////////////////////////////////////////////////////////////////////
		/** Obtain the channel for a peer
		**////////////////////////////////////////////////////////////////////
		SPELLipcChannel& getChannel( int peerKey );

    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the list of connected clients */
		SPELLipcChannelMap m_clients;

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Add a client to the list of connected clients.
		 *
		 * \param key IN: key associated with the client
		 * \param skt IN: corresponding socket.
		**////////////////////////////////////////////////////////////////////
		void addClient( int key, SPELLsocket* skt );

		//////////////////////////////////////////////////////////////////////
		/** Remove a client of the list of connected clients and disconnect
		 * it.
		 *
		 * \param key IN: peer key.
		**////////////////////////////////////////////////////////////////////
		void removeClient( int key );

		//////////////////////////////////////////////////////////////////////
		/** Remove all client of the list of connected clients and disconnect
		 * them.
		**////////////////////////////////////////////////////////////////////
		void removeAllClients();

		//////////////////////////////////////////////////////////////////////
		/** Write the given key to the socket channel
		 *
		 * \param key IN: peer key.
		 * \param skt IN: client socket
		**////////////////////////////////////////////////////////////////////
		void writeKey( int key, SPELLsocket* skt );

		//////////////////////////////////////////////////////////////////////
		/** Read an IPC key in case of reconnection
		**////////////////////////////////////////////////////////////////////
		int readKey( SPELLsocket* skt );

		//////////////////////////////////////////////////////////////////////
		/** Start the processing of a given request.
		 *
		 * \param msg INOUT: request message
		 *
		 * \return The request unique identifier.
		 **///////////////////////////////////////////////////////////////////
		std::string startRequest( SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** Wait the response for a request given by its unique id.
		 *
		 * \param reqId IN: the unique request identifier.
		 * \param timeoutSec IN: the amount of seconds to wait for the response
		 *
		 * \return The response message.
		 *
		 **///////////////////////////////////////////////////////////////////
		SPELLipcMessage waitResponse( std::string reqId, unsigned long timeoutSec );

		//////////////////////////////////////////////////////////////////////
		/** Wait the response for a request given by its unique id, with
		 *  no timeout.
		 *
		 * \param reqId IN: the unique request identifier.
		 *
		 * \return The response message.
		 *
		 **///////////////////////////////////////////////////////////////////
		SPELLipcMessage waitResponse( std::string reqId );

		//////////////////////////////////////////////////////////////////////
		/** Perform request on the given writer.
		 *
		 * \param writer INOUT: the writer to use.
		 * \param request IN: request to perform
		 * \param timeoutSec IN: timeout in milliseconds for the response to arrive.
		 **///////////////////////////////////////////////////////////////////
		SPELLipcMessage performRequest( SPELLipcChannel& channel, SPELLipcMessage& request, unsigned long timeoutMsec );

		//////////////////////////////////////////////////////////////////////
		/** Perform request on the given writer without timeout.
		 *
		 * \param writer INOUT: the writer to use.
		 * \param request IN: request to perform
		 **///////////////////////////////////////////////////////////////////
		SPELLipcMessage performRequest( SPELLipcChannel& channel, SPELLipcMessage& request );

    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the interface name */
		std::string 					m_ifcName;
		/** Holds the last client key used */
		int 							m_lastClientKey;
		/** Holds the server key */
		int 							m_serverKey;
		/** Holds the server port */
		int 							m_serverPort;
		/** Holds the listening socket file descriptor */
		SPELLsocket* 					m_serverSocket;
		/** Synchronization mutex for operations */
		SPELLmutex 						m_clientLock;
		/** True if the interface is connected */
		bool 							m_connected;
		/** Associated IPC listener */
		SPELLipcInterfaceListener* 		m_listener;
		/** Holds the set of incoming request processors to be cleaned up */
		SPELLipcTrash          			m_trash;
		/** Sequence number for outgoing messages and requests */
		unsigned long          			m_ipcSequence;
		/** Mailbox for incoming responses */
		SPELLipcMessageMailbox 			m_mailbox;
		/** Synchronization event for holding the caller until the ifc is ready */
		SPELLevent             			m_readyEvent;
		/** Synchronization mutex for operations */
		SPELLmutex 						m_ipcLock;
		/** Event for client connections */
		SPELLevent                      m_clientConnectionEvent;
		/** Timeout for request retries */
		unsigned int                    m_timeoutIpcRetry;
};

/*@}*/
#endif
