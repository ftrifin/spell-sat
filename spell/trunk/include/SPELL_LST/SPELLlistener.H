// ################################################################################
// FILE       : SPELLlistener.H
// DATE       : Jul 26, 2011
// PROJECT    : SPELL
// DESCRIPTION: SPELL listener library header file
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_LISTENER_H
#define __SPELL_LISTENER_H

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Local includes ----------------------------------------------------------
#include "SPELL_LST/SPELLlistenerContext.H"
#include "SPELL_LST/SPELLlistenerGui.H"
// Project includes --------------------------------------------------------
// System includes ---------------------------------------------------------

/** \addtogroup SPELL_LST */
/*@{*/

//
// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

class SPELLlistener
{
public: //--------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		void start( const std::string& configFile );

	    //////////////////////////////////////////////////////////////////////
	    /**
	    **////////////////////////////////////////////////////////////////////
		void stop();

	// METHODS ///////////////////////////////////////////////////////////////

		static SPELLlistener& get()
		{
			if (s_instance == NULL)
			{
				s_instance = new SPELLlistener();
			}
			return *s_instance;
		}

	// DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		SPELLlistener();

		~SPELLlistener();

	// METHODS ///////////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////

		static SPELLlistener* s_instance;

	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////

	    SPELLlistenerGui* 		m_guiListener;
	    SPELLlistenerContext* 	m_contextListener;
};

/*@}*/
#endif

