// ################################################################################
// FILE       : SPELLdisplayBuffer.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Buffer for Display() messages
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_DISPLAY_BUFFER_H__
#define __SPELL_DISPLAY_BUFFER_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------
#include "SPELL_SYN/SPELLthread.H"
#include "SPELL_IPC/SPELLipcMessage.H"
#include "SPELL_SYN/SPELLmutex.H"

/** \addtogroup SPELL_CIFS */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
class SPELLserverCif;
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Buffer for display messages
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLdisplayBuffer : public SPELLthread
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLdisplayBuffer( const std::string& procId, SPELLserverCif& cif );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLdisplayBuffer();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Main thread method
		**////////////////////////////////////////////////////////////////////
		void run();

		//////////////////////////////////////////////////////////////////////
		/** Stop the buffer
		**////////////////////////////////////////////////////////////////////
		void stop();

		//////////////////////////////////////////////////////////////////////
		/** Send a write message
		**////////////////////////////////////////////////////////////////////
		void write( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** Send a write message
		**////////////////////////////////////////////////////////////////////
		void warning( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** Send a write message
		**////////////////////////////////////////////////////////////////////
		void error( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** Send a prompt message
		**////////////////////////////////////////////////////////////////////
		void prompt( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** Collect the accumulated information and send the IPC message.
		**////////////////////////////////////////////////////////////////////
		void flush();

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the reference to the CIF */
		SPELLserverCif& m_cif;
		/** Working flag */
		bool m_working;
		/** Synchronization lock */
		SPELLmutex m_lock;
		/** Display message skeleton */
		SPELLipcMessage m_message;
		/** Severity to use in the IPC message */
		std::string m_severity;
		/** Text to use in the IPC message */
		std::string m_text;
		/** Scope to use in the IPC message */
		unsigned int m_scope;
};

/*@}*/
#endif
