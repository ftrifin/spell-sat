// ################################################################################
// FILE       : SPELLserverCif.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Client interface for server environment
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_SERVER_CIF_H__
#define __SPELL_SERVER_CIF_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_CIFS/SPELLrequestProcessor.H"
#include "SPELL_CIFS/SPELLdisplayBuffer.H"
// Project includes --------------------------------------------------------
#include "SPELL_SYN/SPELLthread.H"
#include "SPELL_SYN/SPELLevent.H"
#include "SPELL_SYN/SPELLtimer.H"
#include "SPELL_UTIL/SPELLtime.H"
#include "SPELL_CIF/SPELLcif.H"
#include "SPELL_IPC/SPELLipc_Executor.H"
#include "SPELL_IPC/SPELLipcClientInterface.H"
#include "SPELL_IPC/SPELLipcInterfaceListener.H"

/** \defgroup SPELL_CIFS Server-IPC client interface (SPELL_CIFS)
 *
 * This module defines the IPC client interface used by the Executor to
 * communicate with its associated GUIs.
 *
 * */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//============================================================================
/** String mappings for notification types */
static std::string NOTIF_TYPE_STR[] =
{
    MessageValue::DATA_NOTIF_TYPE_ITEM,
    MessageValue::DATA_NOTIF_TYPE_VAL,
    MessageValue::DATA_NOTIF_TYPE_VERIF,
    MessageValue::DATA_NOTIF_TYPE_EXEC,
    MessageValue::DATA_NOTIF_TYPE_SYS,
    MessageValue::DATA_NOTIF_TYPE_TIME
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief IPC based client interface
 **
 ** \par Description and usage:
 **
 ** 	This implementation of SPELLcif uses the IPC layer to
 **  	connect to a SPELL context process.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLserverCif: public SPELLcif, public SPELLipcInterfaceListener, public SPELLtimerListener
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLserverCif();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLserverCif();

	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::setup()
		**////////////////////////////////////////////////////////////////////
		void setup( const SPELLcifStartupInfo& info );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::cleanup()
		**////////////////////////////////////////////////////////////////////
		void cleanup( bool force );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::canClose()
		**////////////////////////////////////////////////////////////////////
		void canClose();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::waitClose()
		**////////////////////////////////////////////////////////////////////
		void waitClose();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::resetClose()
		**////////////////////////////////////////////////////////////////////
		void resetClose();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::getArguments()
		**////////////////////////////////////////////////////////////////////
		std::string getArguments() {
			return m_arguments;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::getCondition()
		**////////////////////////////////////////////////////////////////////
		std::string getCondition() {
			return m_condition;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::isAutomatic()
		**////////////////////////////////////////////////////////////////////
		bool isAutomatic() {
			return m_automatic;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::isVisible()
		**////////////////////////////////////////////////////////////////////
		bool isVisible() {
			return m_visible;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::isBlocking()
		**////////////////////////////////////////////////////////////////////
		bool isBlocking() {
			return m_blocking;
		};

    //====================================================================
    // IPC callbacks
    //====================================================================

		//////////////////////////////////////////////////////////////////////
		/** Process IPC messages.
		 *
		 * \param msg IN: message coming from the controlling GUI via the
		 *  SPELL context.
		**////////////////////////////////////////////////////////////////////
		void processMessage( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** Process IPC requests.
		 *
		 * \param msg IN: request coming from the controlling GUI via the
		 * SPELL context.
		 *
		 * \returns The response message to be sent back to the GUI.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage processRequest( const SPELLipcMessage& msg );

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLipcInterfaceListener
	    **////////////////////////////////////////////////////////////////////
		void processConnectionError( int clientKey, std::string error, std::string reason );

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLipcInterfaceListener
	    **////////////////////////////////////////////////////////////////////
	    void processConnectionClosed( int clientKey );

	//====================================================================
	// Timer callback
	//====================================================================

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLtimer
	    **////////////////////////////////////////////////////////////////////
	    bool timerCallback( unsigned long usecs );

    //====================================================================
    // Python bindings start (\see SPELLcif class)
    //====================================================================

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyLine();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyCall();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyReturn();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyStatus( const SPELLstatusInfo& st );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyUserActionSet( const std::string& label, const unsigned int severity );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyUserActionUnset();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyUserActionEnable( bool enable );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notify( ItemNotification notification );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyError( const std::string& error, const std::string& reason, bool fatal );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void write( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void warning( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void error( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		std::string prompt( const SPELLpromptDefinition& definition );

		//////////////////////////////////////////////////////////////////////
		/** Notify a variable change.
		**////////////////////////////////////////////////////////////////////
		void notifyVariableChange(const std::vector<SPELLvarInfo>& changed );

		//////////////////////////////////////////////////////////////////////
		/** Notify a variable scope change.
		**////////////////////////////////////////////////////////////////////
		void notifyVariableScopeChange( const SPELLscopeInfo& info );

		//////////////////////////////////////////////////////////////////////
		/** Open subprocedure.
		 *
		 * \param procId IN: identifier of the subprocedure
		 * \param args IN: arguments for the subprocedure
		 * \param automatic IN: automatic mode flag
		 * \param blocking IN: blocking mode flag
		 * \param visible IN: visible mode flag
		 *
		 * \returns The procedure identifier with instance number.
		**////////////////////////////////////////////////////////////////////
		std::string openSubprocedure( const std::string& procId,
									  const std::string& args, bool automatic, bool blocking, bool visible );

		//////////////////////////////////////////////////////////////////////
		/** Close the given child procedure.
		 *
		 * \param procId IN: child procedure identifier.
		**////////////////////////////////////////////////////////////////////
		void closeSubprocedure( const std::string& procId );

		//////////////////////////////////////////////////////////////////////
		/** Kill the given child procedure.
		 *
		 * \param procId IN: child procedure identifier.
		**////////////////////////////////////////////////////////////////////
		void killSubprocedure( const std::string& procId );

    //====================================================================
    // Python bindings end
    //====================================================================

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

		friend class SPELLdisplayBuffer;

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Send a request to the controlling GUI.
		 *
		 * \param msg IN: request to be sent.
		 * \param timeoutSec IN: timeout for the request
		 * \returns The request response.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage sendGUIRequest( const SPELLipcMessage& msg, unsigned long timeoutSec );

		//////////////////////////////////////////////////////////////////////
		/** Send a message to the controlling GUI.
		 *
		 * \param msg IN: message to be sent.
		**////////////////////////////////////////////////////////////////////
		void sendGUIMessage( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** Send a request to the context.
		 *
		 * \param msg IN: request to be sent.
		 * \param timeoutSec IN: timeout for the request.
		 *
		 * \returns The request response.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage sendCTXRequest( const SPELLipcMessage& msg, unsigned long timeoutSec );

		//////////////////////////////////////////////////////////////////////
		/** Send a message to the context.
		 *
		 * \param msg IN: message to be sent.
		**////////////////////////////////////////////////////////////////////
		void sendCTXMessage( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** Complete a message for the GUI.
		 *
		 * \param msg IN: message or request to be sent
		 *
		 *////////////////////////////////////////////////////////////////////
		void completeMessage( SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** Get message timestamp.
		**////////////////////////////////////////////////////////////////////
		std::string getTimestampUsec();

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Send the login message to the SPELL context.
		 *
		 * \returns The login response from the context.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage login();

		//////////////////////////////////////////////////////////////////////
		/** Send the logout message to the SPELL context.
		**////////////////////////////////////////////////////////////////////
		void logout();

		//////////////////////////////////////////////////////////////////////
		/** Process the login response and extract configuration parameters.
		 *
		 * \param loginResp IN: response sent by context after login.
		**////////////////////////////////////////////////////////////////////
		void processLogin( const SPELLipcMessage& loginResp );

		//////////////////////////////////////////////////////////////////////
		/** Process messages regarding GUI commands
		**////////////////////////////////////////////////////////////////////
		void processMessageCommand( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** Start a prompt processing
		**////////////////////////////////////////////////////////////////////
		void startPrompt();

		//////////////////////////////////////////////////////////////////////
		/** Cancel prompt processing
		**////////////////////////////////////////////////////////////////////
		void cancelPrompt();

		//////////////////////////////////////////////////////////////////////
		/** Wait for prompt answer to arrive
		**////////////////////////////////////////////////////////////////////
		void waitPromptAnswer();

		//////////////////////////////////////////////////////////////////////
		/** Set closing flag
		**////////////////////////////////////////////////////////////////////
		void setClosing();

		//////////////////////////////////////////////////////////////////////
		/** Get closing flag
		**////////////////////////////////////////////////////////////////////
		bool isClosing();

    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the IPC interface to communicate with the SPELL context */
		SPELLipcClientInterface* m_ifc;
		/** Buffer to accumulate display messages */
		SPELLdisplayBuffer* m_buffer;
		/** Last line notification time */
		/** Optimization: prevent redundant line notifications */
		std::string m_lastStack;
		/** Visible mode flag */
		bool m_visible;
		/** Blocking mode flag */
		bool m_blocking;
		/** Automatic mode flag */
		bool m_automatic;
		/** Identifier of the controlling GUI */
		std::string m_controlGui;
		/** Host of the controlling GUI */
		std::string m_controlHost;
		/** Arguments for procedure execution, given by context */
		std::string m_arguments;
		/** Condition for procedure execution, given by context */
		std::string m_condition;
		/** Event for cleaning up connections */
		SPELLevent m_finishEvent;
		/** True when the CIF is ready to work */
		bool m_ready;
		/** Optimization: write message skeleton */
		SPELLipcMessage m_wrMessage;
		/** Optimization: line notification request skeleton */
		SPELLipcMessage m_lnMessage;
		/** Optimization: item notification request skeleton */
		SPELLipcMessage m_ntMessage;
		/** Optimization: status notification request skeleton */
		SPELLipcMessage m_stMessage;
		/** Processes incoming messages and requests */
		SPELLrequestProcessor m_processor;
		/** Sequence counter */
		unsigned long m_sequence;
		/** Stack sequence counter */
		unsigned long m_sequenceStack;
		/** Prompt response arrival event */
		SPELLevent m_promptAnswerEvent;
		/** Holds the active prompt message */
		SPELLipcMessage m_promptMessage;
		/** Holds the prompt answer message */
		SPELLipcMessage m_promptAnswer;
		/** True if error was reported */
		bool m_errorState;
		/** IPC synchronization */
		SPELLmutex m_ipcLock;
		/** Close synchronization */
		SPELLmutex m_closeLock;
		/** Closing flag */
		bool m_closing;
		/** Timeout in msec for executor requests to GUI */
		unsigned int m_ipcTimeoutGuiRequestMsec;
		/** Timeout in msec for executor requests to context */
		unsigned int m_ipcTimeoutCtxRequestMsec;
		/** Timeout in msec for opening a subprocedure */
		unsigned int m_timeoutOpenProcMsec;
		/** Timeout in msec for executor login response */
		unsigned int m_timeoutExecLoginMsec;
		/** Timer to ensure correct line alignment with GUI */
		SPELLtimer m_lineTimer;
		/** Synchronization with line notification timer */
		SPELLmutex m_lineLock;
};

/*@}*/
#endif
