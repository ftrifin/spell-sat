// ################################################################################
// FILE       : SPELLvariableMonitor.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Monitor for runtime procedure variables
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_VAR_MONITOR_H__
#define __SPELL_VAR_MONITOR_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLvarInfo.H"
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"

/** \addtogroup SPELL_EXC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Listener for variable changes.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLvariableChangeListener
{
public:

	//////////////////////////////////////////////////////////////////////
	/** Destructor.
	**////////////////////////////////////////////////////////////////////
	virtual ~SPELLvariableChangeListener() {;};

	//////////////////////////////////////////////////////////////////////
	/** Notify about a variable change.
	 *
	 * \param changed IN: list of changed variables.
	 *
	**////////////////////////////////////////////////////////////////////
	virtual void variableChanged( const std::vector<SPELLvarInfo>& added,
								  const std::vector<SPELLvarInfo>& changed,
			                      const std::vector<SPELLvarInfo>& deleted ) = 0;

};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Monitor of variables
 **
 ** \par Description and usage:
 **
 ** 	Used to implement the watch-of-variables mechanism
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLvariableMonitor
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////

		/** Type for variable name-value map */
		typedef std::map<std::string,SPELLvarInfo> VarMap;

    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLvariableMonitor( SPELLvariableChangeListener* listener,
							  PyFrameObject* frame,
							  std::set<std::string>& initialVariables );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLvariableMonitor();

    // STATIC ////////////////////////////////////////////////////////////////

		static bool s_enabled;

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Get currently available global variables.
		 *
		 * \return The list of variables.
		**////////////////////////////////////////////////////////////////////
		const VarMap& getGlobalVariables();

		//////////////////////////////////////////////////////////////////////
		/** Get currently available local variables.
		 *
		 * \return The list of variables.
		**////////////////////////////////////////////////////////////////////
		const VarMap& getLocalVariables();

		//////////////////////////////////////////////////////////////////////
		/** Change variable
		 *
		 * \param var IN: the variable to change.
		 *
		**////////////////////////////////////////////////////////////////////
		void changeVariable( SPELLvarInfo& var );

		//////////////////////////////////////////////////////////////////////
		/** Get variable value.
		 *
		 * \param varName IN: variable name
		 *
		 * \return The variable information.
		**////////////////////////////////////////////////////////////////////
		void getVariable( SPELLvarInfo& var );

		//////////////////////////////////////////////////////////////////////
		/** Get Python reference of a given global variable in the frame
		**////////////////////////////////////////////////////////////////////
		PyObject* getVariableRef( const std::string& name );

		//////////////////////////////////////////////////////////////////////
		/** Analyze variable dictionary to detect changes.
		**////////////////////////////////////////////////////////////////////
		void analyze();

		//////////////////////////////////////////////////////////////////////
		/** Initialize the variable dictionary
		**////////////////////////////////////////////////////////////////////
		void initialize();

		//////////////////////////////////////////////////////////////////////
		/** Get the scope identifier
		**////////////////////////////////////////////////////////////////////
		std::string getScopeName() { return m_scopeName; };

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Retrieve existing local variables in the current execution frame
		 *  \param vars INOUT: vector of variable information to fill.
		 *
		**////////////////////////////////////////////////////////////////////
		void retrieveLocalVariables();

		//////////////////////////////////////////////////////////////////////
		/** Retrieve existing global variables in the current execution frame
		 *  \param vars INOUT: vector of variable information to fill.
		 *  \param locals IN: vector of variable names found in local scope
		 **///////////////////////////////////////////////////////////////////
		void retrieveGlobalVariables();

		//////////////////////////////////////////////////////////////////////
		/** Build the required variable names
		**////////////////////////////////////////////////////////////////////
		std::vector<std::string> retrieveNames();

		//////////////////////////////////////////////////////////////////////
		/** Check if a variable should not be monitored
		**////////////////////////////////////////////////////////////////////
		bool shouldDiscard( const std::string& name, PyObject* value );

    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Reference to the frame */
		PyFrameObject* m_frame;
		/** Scope name */
		std::string m_scopeName;
		/** Initialized flag */
		bool m_initialized;
		/** Reference to the single change listener */
		SPELLvariableChangeListener* m_listener;
		/** Map of global variables */
		VarMap m_globalVariables;
		/** Map of local variables */
		VarMap m_localVariables;
		/** Map of initial variables to discard on any request */
		std::set<std::string>& m_ignoreVariables;
};

/*@}*/
#endif
