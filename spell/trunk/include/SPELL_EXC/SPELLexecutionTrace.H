// ################################################################################
// FILE       : SPELLexecutionTrace.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Keeps trace of the visited and executed procedure lines.
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_EXEC_TRACE_H__
#define __SPELL_EXEC_TRACE_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"

/** \addtogroup SPELL_EXC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Execution trace model
 **
 ** \par Description and usage:
 **
 ** 	Holds information about execution history.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLexecutionTrace
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLexecutionTrace();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLexecutionTrace();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Visit the given line.
		 *
		 * \param lineNo IN: the line number.
		 *
		**////////////////////////////////////////////////////////////////////
		void setCurrentLine( unsigned int lineNo );

		//////////////////////////////////////////////////////////////////////
		/** Obtain the current line.
		 *
		 * \return the line number.
		**////////////////////////////////////////////////////////////////////
		unsigned int getCurrentLine() { return m_currentLine; };

		//////////////////////////////////////////////////////////////////////
		/** Mark the current line as executed.
		**////////////////////////////////////////////////////////////////////
		void markExecuted();

		//////////////////////////////////////////////////////////////////////
		/** Obtain number of visits of a given line
		 *
		 * \param lineNo IN: the line number.
		 *
		 * \return The number of visits
		**////////////////////////////////////////////////////////////////////
		unsigned int getNumVisits( unsigned int lineNo ) const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain number of executions of a given line
		 *
		 * \param lineNo IN: the line number.
		 *
		 * \return The number of executions
		**////////////////////////////////////////////////////////////////////
		unsigned int getNumExecutions( unsigned int lineNo ) const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the executions of the current line.
		 *
		 * \return the number of executions.
		**////////////////////////////////////////////////////////////////////
		unsigned int getCurrentLineExecutions() const { return getNumExecutions(m_currentLine); };

		//////////////////////////////////////////////////////////////////////
		/** Obtain the visits of the current line.
		 *
		 * \return the number of visits.
		**////////////////////////////////////////////////////////////////////
		unsigned int getCurrentLineVisits() const { return getNumVisits(m_currentLine); };

		//////////////////////////////////////////////////////////////////////
		/** Reset counters.
		**////////////////////////////////////////////////////////////////////
		void reset();

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////

		/** Represents a map of line numbers and a counter */
		typedef std::map<unsigned int, unsigned int> LineMap;

    // LIFECYCLE /////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		/** Holds the current line */
		unsigned int m_currentLine;
		/** Holds the information about visited lines */
		LineMap m_visits;
		/** Holds the information about executed lines */
		LineMap m_executions;
};

/*@}*/
#endif
