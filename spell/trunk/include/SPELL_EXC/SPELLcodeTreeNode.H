// ################################################################################
// FILE       : SPELLcodeTreeNode.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Code tree node implementation
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_CODE_TREE_NODE_H__
#define __SPELL_CODE_TREE_NODE_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLcodeTreeNodeIF.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_EXC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Executed node data model
 **
 ** \par Description and usage:
 **
 ** 	Holds information about code execution events.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLcodeTreeNode : public SPELLcodeTreeNodeIF
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLcodeTreeNode( unsigned int depth, const std::string& codeId, unsigned int firstLine, SPELLcodeTreeLineIF* parent );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLcodeTreeNode();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeNodeIF.
		**////////////////////////////////////////////////////////////////////
		void eventCall( const std::string& codeId, unsigned int lineNo );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeNodeIF.
		**////////////////////////////////////////////////////////////////////
		void eventLine( unsigned int lineNo );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeNodeIF.
		**////////////////////////////////////////////////////////////////////
		void reset();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeNodeIF.
		**////////////////////////////////////////////////////////////////////
		unsigned int getDepth();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeNodeIF.
		**////////////////////////////////////////////////////////////////////
		SPELLcodeTreeLineIF* getLine( unsigned int lineNo ) const;

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeNodeIF.
		**////////////////////////////////////////////////////////////////////
		SPELLcodeTreeLineIF* getCurrentLine() const { return getLine( m_currentLine ); };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeNodeIF.
		**////////////////////////////////////////////////////////////////////
		const SPELLcodeTreeLineIF* getParent() const { return m_parentLine; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeNodeIF.
		**////////////////////////////////////////////////////////////////////
		unsigned int getCurrentLineNo() const { return m_currentLine; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeNodeIF.
		**////////////////////////////////////////////////////////////////////
		std::string getCodeIdentifier() const { return m_codeId; };

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the recursion depth */
		unsigned int m_depth;
		/** Holds the parent line, if any */
		SPELLcodeTreeLineIF* m_parentLine;
		/** Holds the current line number */
		unsigned int m_currentLine;
		/** Holds the list of executed lines */
		SPELLcodeTreeLineIF::Map m_lines;
		/**  Holds the code identifier */
		std::string m_codeId;
};

/*@}*/
#endif
