// ################################################################################
// FILE       : SPELLastAnalyzer.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: AST code analyzer. Used to find certain special locations during
//				procedure execution.
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __TEST_AST_AN_H__
#define __TEST_AST_AN_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLpythonHelper.H"
#include "SPELL_UTIL/SPELLbase.H"
// System includes ---------------------------------------------------------

/** \addtogroup SPELL_EXC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief AST code analyzer
 **
 ** \par Description:
 **
 ** \par Usage:
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLastAnalyzer
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLastAnalyzer( const std::string& filename );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLastAnalyzer();

	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Check if a line is simple or not
		**////////////////////////////////////////////////////////////////////
		bool isSimpleLine( unsigned int lineno );

		//////////////////////////////////////////////////////////////////////
		/** Check if a line is the start of a block
		**////////////////////////////////////////////////////////////////////
		bool isBlockStart( unsigned int lineno );

		//////////////////////////////////////////////////////////////////////
		/** Check if a line is inside of a block
		**////////////////////////////////////////////////////////////////////
		bool isInsideBlock( unsigned int lineno );

		//////////////////////////////////////////////////////////////////////
		/** Get the end of the block
		**////////////////////////////////////////////////////////////////////
		unsigned int getBlockEnd( unsigned int startLineNo );

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Process a file
		 *
		 * \param filename IN: path to filename to process
		 *
		**////////////////////////////////////////////////////////////////////
		void process( const std::string& filename );

		//////////////////////////////////////////////////////////////////////
		/** Find relevant lines and line types in a node
		 *
		 * \param filename IN: path to filename to process
		 *
		**////////////////////////////////////////////////////////////////////
		void findNodeLines( struct _node* node, unsigned int depth, unsigned int& parDepth );

	// DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////

		typedef enum _SPELLlineType
		{
			NONE = 0,
			START_MULTIPLE,
			MULTIPLE
		}
		SPELLlineType;

    // TYPES /////////////////////////////////////////////////////////////////

		typedef std::map<unsigned int, unsigned int> LineTypes;

    // LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////
		/** Line types */
		LineTypes m_lineTypes;
		/** Last line number */
		unsigned int m_openLineNo;
		/** Last line type */
		SPELLlineType m_lastLineType;
		/** Holds the maximum line number */
		unsigned int m_maxLineNo;
};

/*@}*/
#endif
