// ################################################################################
// FILE       : SPELLwsDataHandler.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: WS data management
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_WS_DATAHANDLER_H__
#define __SPELL_WS_DATAHANDLER_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Local includes ----------------------------------------------------------
#include "SPELL_WS/SPELLwsDataCodes.H"
#include "SPELL_WS/SPELLwsStorage.H"
// Project includes --------------------------------------------------------
// System includes ---------------------------------------------------------

/** \addtogroup SPELL_WS */
/*@{*/

// FORWARD REFERENCES //////////////////////////////////////////////////////
// ENUMS ///////////////////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Basic interface for WS data handlers.
 **
 ** \par Description and usage:
 **
 **		Data handlers are classes that deal with Python object read/write
 **		and serialization processes, used for writing or reading ws files.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLwsDataHandler
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param code IN: data code identifying the handler type.
		**////////////////////////////////////////////////////////////////////
		SPELLwsDataHandler( SPELLwsData::Code code );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLwsDataHandler();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Write the data to 0the storage.
		**////////////////////////////////////////////////////////////////////
		virtual void write() = 0;

		//////////////////////////////////////////////////////////////////////
		/** Read the data from the storage.
		**////////////////////////////////////////////////////////////////////
		virtual void read() = 0;

		//////////////////////////////////////////////////////////////////////
		/** Get the associated Python object.
		 *
		 * \return The associated object.
		**////////////////////////////////////////////////////////////////////
		virtual PyObject* getObject() const = 0;

		//////////////////////////////////////////////////////////////////////
		/** Set or change the associated storage device.
		 *
		 * \param storage IN: the storage device.
		**////////////////////////////////////////////////////////////////////
		void setStorage( SPELLwsStorage* storage );

		//////////////////////////////////////////////////////////////////////
		/** Get the associated data code.
		 *
		 * \return The data code.
		**////////////////////////////////////////////////////////////////////
		SPELLwsData::Code getCode() const;

		//////////////////////////////////////////////////////////////////////
		/** Store the handler data code.
		**////////////////////////////////////////////////////////////////////
		void storeDataCode();

		//////////////////////////////////////////////////////////////////////
		/** Load the handler data code.
		**////////////////////////////////////////////////////////////////////
		SPELLwsData::Code loadDataCode();

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
		/** Represents a list of subhandlers */
		typedef std::list<SPELLwsDataHandler*> HandlerList;
    // LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the associated storage device.
		 *
		 * \return The storage device.
		**////////////////////////////////////////////////////////////////////
		SPELLwsStorage* getStorage();

		//////////////////////////////////////////////////////////////////////
		/** Set the associated data code.
		 *
		 * \param code IN: the data code.
		**////////////////////////////////////////////////////////////////////
		void setCode( SPELLwsData::Code code );

	// DATA MEMBERS //////////////////////////////////////////////////////////

private: /////////////////////////////////////////////////////////////////////

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////
		/** Associated storage device */
		SPELLwsStorage* m_storage;
		/** Data code */
		SPELLwsData::Code m_dataCode;
};

/*@}*/
#endif
