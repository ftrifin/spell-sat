// ################################################################################
// FILE       : SPELLwsStaticData.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: WS manager for static runtime data
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_WS_STATIC_DATA_H__
#define __SPELL_WS_STATIC_DATA_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_WS/SPELLwsStorage.H"
#include "SPELL_WS/SPELLwsStartupInfo.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_WS */
/*@{*/

// FORWARD REFERENCES //////////////////////////////////////////////////////
// ENUMS ///////////////////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Manages the static data of a Python execution frame.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLwsStaticData
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param info IN: startup information
		 * \param depth IN: recursion depth of the associated frame
		 * \param frame IN: associated frame, or previous frame in recovery mode.
		 *     In recovery and depth zero, it is the original head frame, that
		 *     is used for dictionary copy.
		 *
		**////////////////////////////////////////////////////////////////////
		SPELLwsStaticData( const SPELLwsStartupInfo& info, unsigned int depth, PyFrameObject* frame );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLwsStaticData();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Restore a frame object from persistent files
		**////////////////////////////////////////////////////////////////////
		PyFrameObject* restore();

		//////////////////////////////////////////////////////////////////////
		/** Cleanup persistent files
		**////////////////////////////////////////////////////////////////////
		void cleanup();

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Store the frame static data
		**////////////////////////////////////////////////////////////////////
		void save();


    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Warmstart startup information */
		SPELLwsStartupInfo m_startup;
		/** Holds the recursion depth */
		int m_depth;
		/** Borrowed reference of the frame */
		PyFrameObject* m_frame;
		/** Holds the file name of the associated persistent file */
		std::string m_persistentFile;
		/** Holds the file name of the associated recovery file */
		std::string m_recoveryFile;
		/** Storage for the associated persistent file */
		SPELLwsStorage* m_storage;
};

/*@}*/
#endif
