// ################################################################################
// FILE       : SPELLcifHelper.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Utilities for CIF
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_CIF_HELPER_H__
#define __SPELL_CIF_HELPER_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_CIF/SPELLcif.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_CIF */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Utility class for CIF
 **
 ** \par Description and usage:
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLcifHelper
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the corresponding option list for a prompt, from the
		 * Python arguments
		**////////////////////////////////////////////////////////////////////
		static void generatePromptOptions( PyObject* args, SPELLpromptDefinition& def );

		//////////////////////////////////////////////////////////////////////
		/** Translate a stringified answer to Python value
		**////////////////////////////////////////////////////////////////////
		static PyObject* getPythonResult( const std::string& result, const SPELLpromptDefinition& def );

		//////////////////////////////////////////////////////////////////////
		/** Translate a stringified answer to text answer
		**////////////////////////////////////////////////////////////////////
		static std::string getResult( const std::string& result, const SPELLpromptDefinition& def );

		//////////////////////////////////////////////////////////////////////
		/** Display prompt output. To be shared between all the CIF executors/shell ...
		**////////////////////////////////////////////////////////////////////
		static void displayPrompt( const SPELLpromptDefinition& def );

		//////////////////////////////////////////////////////////////////////
		/** Issue a prompt through command line. Used by the command line
		 * interface and the shell.
		**////////////////////////////////////////////////////////////////////
		static std::string commandLinePrompt( const SPELLpromptDefinition& def, bool useRaw );

		//////////////////////////////////////////////////////////////////////
		/** Return the index of the expected value when there are options.
		 *  If not, returns the text, number or date value introduced.
		**////////////////////////////////////////////////////////////////////
		static std::string getRawAnswer( std::string answer, const SPELLpromptDefinition& def );

    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Translate a string code to boolean aquivalent
		**////////////////////////////////////////////////////////////////////
		static bool strToBoolean( std::string str );

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
};

/*@}*/
#endif
