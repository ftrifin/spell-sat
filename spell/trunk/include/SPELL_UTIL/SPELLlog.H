// ################################################################################
// FILE       : SPELLlog.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Executor logging mechanism
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_LOG_H__
#define __SPELL_LOG_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------
#include "SPELL_SYN/SPELLmutex.H"
// System includes ---------------------------------------------------------

/** \addtogroup SPELL_UTIL */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Defines the level of log messages.
 **
 ** \par Description and usage:
 **
 **  	Log level is used to distinguish log messages affecting different
 **     subsystems of SPELL.
 **
 *////////////////////////////////////////////////////////////////////////////
typedef enum LogLevel_
{
    LOG_MAIN,
    LOG_INIT,
    LOG_CNFG,
    LOG_PROC,
    LOG_LANG,
    LOG_COMM,
    LOG_LEV_MAX   // Sentinel, shall be the last one always
}
LogLevel;

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Defines the severity of log messages.
 **
 ** \par Description and usage:
 **
 **  	Log level is used to distinguish log messages of different importance.
 **
 *////////////////////////////////////////////////////////////////////////////
typedef enum LogSeverity_
{
    LOG_INFO,
    LOG_DEBUG,
    LOG_WARN,
    LOG_ERROR,
    LOG_SEV_MAX   // Sentinel, shall be the last one always
}
LogSeverity;

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Python object linking to the logger class.
 **
 ** \par Description and usage:
 **
 **  	This structure binds the C++ logger class instance to the Python
 **   	layer, so that Python objects can access and use it as if it where
 **     a regular Python instance.
 **
 **     This Python object binding is installed on the Python layer via
 **     the SPELL registry wrapper.
 **
 ** \see SPELLregistry, SPELL_WRP
 **
 *////////////////////////////////////////////////////////////////////////////
typedef struct PyLogObject_
{
    PyObject_HEAD;
}
PyLogObject;

// GLOBALS /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Installs the Python binding for the logger class on the Python
 **  layer.
 **
 ** \par Description and usage:
 **
 **  	Used from the main function of SPELL programs that need to provide
 **     logging access to Python code.
 **
 ** \throws SPELLcoreException if the Python type cannot be created
 *////////////////////////////////////////////////////////////////////////////
void Log_Install();

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Defines correspondences between log severities and labels used to
 **  write the log files.
 **
 *////////////////////////////////////////////////////////////////////////////
static const std::string LOG_SEVERITY_STR[] =
{
    "[ INFO  ]",
    "[ DEBUG ]",
    "[ WARN  ]",
    "[ ERROR ]"
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Defines correspondences between log severities and constant names
 **  that are installed on the Python layer.
 **
 *////////////////////////////////////////////////////////////////////////////
static const std::string LOG_SEVERITY_LBL[] =
{
    "LOG_INFO",
    "LOG_DEBUG",
    "LOG_WARN",
    "LOG_ERROR"
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Defines correspondences between log levels and labels used to
 **  write the log files.
 **
 *////////////////////////////////////////////////////////////////////////////
static const std::string LOG_LEVEL_STR[] =
{
    "[ MAIN ]",
    "[ INIT ]",
    "[ CNFG ]",
    "[ PROC ]",
    "[ LANG ]",
    "[ COMM ]"
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Defines correspondences between log levels and constant names
 **  that are installed on the Python layer.
 **
 *////////////////////////////////////////////////////////////////////////////
static const std::string LOG_LEVEL_LBL[] =
{
    "LOG_MAIN",
    "LOG_INIT",
    "LOG_CNFG",
    "LOG_PROC",
    "LOG_LANG",
    "LOG_COMM"
};

// DEFINES /////////////////////////////////////////////////////////////////

//============================================================================
// General constants
//============================================================================

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Shared memory key for log control.
 **
 *////////////////////////////////////////////////////////////////////////////
#define LOG_SHM_KEY 001122334455
//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Maximum length for the origin field in log lines
 **
 *////////////////////////////////////////////////////////////////////////////
#define LOG_MAX_LEN 35


//============================================================================
// Basic tracing macros
//============================================================================

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Log an information message.
 **
 *////////////////////////////////////////////////////////////////////////////
#define LOG_INFO(x)  SPELLlog::instance().logInternal(__FILE__,x, LOG_INFO,  LOG_PROC);
//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Log a warning message.
 **
 *////////////////////////////////////////////////////////////////////////////
#define LOG_WARN(x)  SPELLlog::instance().logInternal(__FILE__,x, LOG_WARN,  LOG_PROC);
//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Log an error message.
 **
 *////////////////////////////////////////////////////////////////////////////
#define LOG_ERROR(x) SPELLlog::instance().logInternal(__FILE__,x, LOG_ERROR, LOG_PROC);
//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Log a tracing message for debugging. It will be compiled only if
 ** the \c WITH_DEBUG macro is defined.
 **
 *////////////////////////////////////////////////////////////////////////////
#ifdef WITH_DEBUG
#define DEBUG(x)     SPELLlog::instance().trace(__FILE__,x);
#define DEBUGX(x)  x
#else
#define DEBUG(x)
#define DEBUGX(x)
#endif

#define DEBUGG(x, y)     if (x) { SPELLlog::instance().trace(__FILE__,y); }
#define DEBUGGX(x, y)  if (x) { y; };

//============================================================================
// Macros for enabling/disabling logging
//============================================================================
//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Enable logging
 **
 *////////////////////////////////////////////////////////////////////////////
#define LOG_ENABLE  SPELLlog::instance().enableLog(true);
//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Disable logging
 **
 *////////////////////////////////////////////////////////////////////////////
#define LOG_DISABLE SPELLlog::instance().enableLog(false);
//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Enable debug tracing
 **
 *////////////////////////////////////////////////////////////////////////////
#define LOG_TRACES_ENABLE  SPELLlog::instance().enableTraces(true);
//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Disable debug tracing
 **
 *////////////////////////////////////////////////////////////////////////////
#define LOG_TRACES_DISABLE SPELLlog::instance().enableTraces(false);

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief SPELL logger class.
 **
 ** \par Description and usage:
 **
 **  	Singleton used via the \c LOG_xx macros that allow logging messages
 **     from any part of the SPELL code.
 **
 ** \see SPELLbase
 **
 *////////////////////////////////////////////////////////////////////////////
class SPELLlog
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Destructor
		**////////////////////////////////////////////////////////////////////
		~SPELLlog();

    // STATIC ////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the logger instance.
		 *
		 * \return the singleton instance.
		**////////////////////////////////////////////////////////////////////
		static SPELLlog& instance();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Initialize and prepare the log file
		 *
		 * \param filename IN: should be the procedure id / script name
		 * \param timestamp IN: the time id for the file name header
		**////////////////////////////////////////////////////////////////////
		void setLogFile( std::string filename, std::string timestamp );

		//////////////////////////////////////////////////////////////////////
		/** Get the log file name
		 *
		 * \return Log file name
		**////////////////////////////////////////////////////////////////////
		std::string getLogFile() {
			return m_logFileName;
		};

		//////////////////////////////////////////////////////////////////////
		/** Set the maximum log level
		 *
		 * \param level IN: the maximum level to show
		**////////////////////////////////////////////////////////////////////
		void showLevel( LogLevel level );

		//////////////////////////////////////////////////////////////////////
		/** Enable or disable logging
		 *
		 * \param enable IN: If true, logging is enabled
		**////////////////////////////////////////////////////////////////////
		void enableLog( bool enable );

		//////////////////////////////////////////////////////////////////////
		/** Enable or disable debug traces
		 *
		 * \param enable IN: If true, tracing is enabled
		**////////////////////////////////////////////////////////////////////
		void enableTraces( bool enable );

		//////////////////////////////////////////////////////////////////////
		/** Log call for Python side
		 *
		 * \param msg IN: log message
		 * \param sev IN: message severity
		 * \param lev IN: message level
		**////////////////////////////////////////////////////////////////////
		void log( std::string msg, LogSeverity sev, LogLevel lev );

		//////////////////////////////////////////////////////////////////////
		/** Log call for executor side
		 *
		 * \param location IN: message originator
		 * \param msg IN: log message
		 * \param sev IN: message severity
		 * \param lev IN: message level
		**////////////////////////////////////////////////////////////////////
		void logInternal( const std::string& location, const std::string& msg, const LogSeverity& sev, const LogLevel& lev );

		//////////////////////////////////////////////////////////////////////
		/** Trace call for executor side
		 *
		 * \param location IN: message originator
		 * \param msg IN: log message
		**////////////////////////////////////////////////////////////////////
		void trace( const std::string& location, const std::string& msg );

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLlog();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the origin string for a log message.
		 *
		 * \param origin IN: the string containing the prettyfied file name
		 *  where the log message whas created.
		 *
		 *  \return The origin string already formatted for the log file.
		**////////////////////////////////////////////////////////////////////
		std::string originStr( const std::string& origin );

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** True if log messages can be used */
		bool m_enabled;
		/** True if trace messages can be used */
		bool m_traceEnabled;
		/** Holds the log file name */
		std::string m_logFileName;
		/** Holds the log file object */
		std::ofstream m_logFile;
		/** Maximum level to show (filter messages with lower levels) */
		LogLevel m_maxLevel;
		/** Synchronization mutex */
		SPELLmutex m_logMutex;
		/** Mutex for thread safe logging (traces) */
		SPELLmutex m_logInternalMutex;
};

/*@}*/
#endif
