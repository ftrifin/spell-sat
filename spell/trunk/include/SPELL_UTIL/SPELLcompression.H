// ################################################################################
// FILE       : SPELLcompression.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: General utilities
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_COMPRESSION_H__
#define __SPELL_COMPRESSION_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_UTIL */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Compression and uncompression of byte data using GZIP algorithm
 **
 ** Makes use of ZLIB library inflate() and deflate() functions. Notice
 ** the initialization functions, that set the windowBits in order to
 ** use the GZIP algorithm. This algorithm is the same as the one used
 ** on the GUI side (java.zip.GZIP streams)
**////////////////////////////////////////////////////////////////////////////
class SPELLcompression
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLcompression( std::string data );

		//////////////////////////////////////////////////////////////////////
		/** Destructor
		**////////////////////////////////////////////////////////////////////
		~SPELLcompression();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Compress the data contained and return the resulting bytes.
		**////////////////////////////////////////////////////////////////////
		std::string compress();

		//////////////////////////////////////////////////////////////////////
		/** Uncompress the data contained and return the resulting bytes.
		**////////////////////////////////////////////////////////////////////
		std::string uncompress();

private: //--------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Read more bytes from the input data and put them on the process
		 * input buffer.
		 *
		 * Return the actual amount of bytes read;
		**////////////////////////////////////////////////////////////////////
		unsigned int readMoreBytes();

		//////////////////////////////////////////////////////////////////////
		/** Write next generated bytes from process output buffer into the
		 * data destination buffer
		 *
		 * Return the actual amount of bytes read;
		**////////////////////////////////////////////////////////////////////
		void writeNextBytes( unsigned int len );

		//////////////////////////////////////////////////////////////////////
		/** Get number of remaining bytes
		**////////////////////////////////////////////////////////////////////
		unsigned int getRemaining();

	// DATA MEMBERS //////////////////////////////////////////////////////////

		/** Used by the deflate/inflate algorithms to store input work data */
		char* m_processInput;
		/** Used by the deflate/inflate algorithms to store output work data */
		char* m_processOutput;
		/** Stores the result of the algorithm */
		std::stringbuf m_outputData;
		/** Stores the original data used for the algorithm */
		std::string    m_inputData;
		/** Amount of bytes of the original data string */
		unsigned int   m_totalInputLen;
		/** Amount of bytes read, incremented during the processing */
		unsigned int   m_totalReadBytes;
		/** Amount of bytes written, incremented during the processing */
		unsigned int   m_totalWriteBytes;
		/** Algorithm configuration data and processing pointers and counters */
		z_stream       m_stream;

};

/*@}*/
#endif
