// ################################################################################
// FILE       : SPELLdtaVariable.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Data variable implementation
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_DTA_VARIABLE_H__
#define __SPELL_DTA_VARIABLE_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"
#include "SPELL_UTIL/SPELLpythonHelper.H"
#include "SPELL_WRP/SPELLpyValue.H"
// Local includes ----------------------------------------------------------
// System includes ---------------------------------------------------------
#include "structmember.h"

// FORWARD REFERENCES //////////////////////////////////////////////////////
class SPELLdtaContainer;
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////
// GLOBALS /////////////////////////////////////////////////////////////////

/** \addtogroup SPELL_DTA */
/*@{*/

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Variable controller implementation
 **
 *////////////////////////////////////////////////////////////////////////////
class SPELLdtaVariable
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLdtaVariable( PyObject* kwds );

		//////////////////////////////////////////////////////////////////////
		/** Destructor
		**////////////////////////////////////////////////////////////////////
		~SPELLdtaVariable();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Set variable value
		**////////////////////////////////////////////////////////////////////
		void setValue( PyObject* value );

		//////////////////////////////////////////////////////////////////////
		/** Get variable name
		**////////////////////////////////////////////////////////////////////
		std::string getName() { return m_name; };

		//////////////////////////////////////////////////////////////////////
		/** Get variable value
		**////////////////////////////////////////////////////////////////////
		PyObject* getValue();

		//////////////////////////////////////////////////////////////////////
		/** Get variable value without processing or type check
		**////////////////////////////////////////////////////////////////////
		PyObject* getValueEx();

		//////////////////////////////////////////////////////////////////////
		/** Check variable initialized
		**////////////////////////////////////////////////////////////////////
		bool isInitialized() { return ((m_value != Py_None)&&(m_value != NULL)); };

		//////////////////////////////////////////////////////////////////////
		/** Check if get value should be confirmed
		**////////////////////////////////////////////////////////////////////
		bool confirmGet() { return m_confirmGet; };

		//////////////////////////////////////////////////////////////////////
		/** Set variable name
		**////////////////////////////////////////////////////////////////////
		void setName( const std::string& name ) { m_name = name; };

		//////////////////////////////////////////////////////////////////////
		/** Set variable name
		**////////////////////////////////////////////////////////////////////
		void setContainer( SPELLdtaContainer* container );

		//////////////////////////////////////////////////////////////////////
		/** Change confirm get flag
		**////////////////////////////////////////////////////////////////////
		void setConfirmGet( bool confirm )
		{
			m_confirmGet = confirm;
		};

		//////////////////////////////////////////////////////////////////////
		/** Get string representation
		**////////////////////////////////////////////////////////////////////
		std::string str();

		//////////////////////////////////////////////////////////////////////
		/** Get string 'repr' representation
		**////////////////////////////////////////////////////////////////////
		std::string repr();

		//////////////////////////////////////////////////////////////////////
		/** Get variable detailed string
		**////////////////////////////////////////////////////////////////////
		std::string toString();

		//////////////////////////////////////////////////////////////////////
		/** Get format
		**////////////////////////////////////////////////////////////////////
		std::string getFormat() { return m_format; };

		//////////////////////////////////////////////////////////////////////
		/** Get format
		**////////////////////////////////////////////////////////////////////
		void setFormat( const std::string& format ) { m_format = format; };

		//////////////////////////////////////////////////////////////////////
		/** Get type
		**////////////////////////////////////////////////////////////////////
		std::string getType() { return m_type; };

		//////////////////////////////////////////////////////////////////////
		/** Get confirm get
		**////////////////////////////////////////////////////////////////////
		bool getConfirmGet() { return m_confirmGet; }

		//////////////////////////////////////////////////////////////////////
		/** Get expected list
		**////////////////////////////////////////////////////////////////////
		std::vector<SPELLpyValue> getExpected() { return m_expected; };

		//////////////////////////////////////////////////////////////////////
		/** Get range
		**////////////////////////////////////////////////////////////////////
		std::vector<SPELLpyValue> getRange() { return m_range; };

		//////////////////////////////////////////////////////////////////////
		/** Prompt user to provide a value for this variable
		 *
		 * \param message INOUT: message to be displayed initially (may change)
		 *
		 * \return True on success
		**////////////////////////////////////////////////////////////////////
		bool promptForValue( std::string& message );

		//////////////////////////////////////////////////////////////////////
		/** Prompt user to confirm the value for this variable
		 *
		 * \return Final value set
		**////////////////////////////////////////////////////////////////////
		PyObject* confirmValue();

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		void getGivenValue( PyObject* kwds );
		void getGivenExpected( PyObject* kwds );
		void getGivenRange( PyObject* kwds );
		bool getGivenType( PyObject* kwds );
		bool getGivenFormat( PyObject* kwds );
		void getGivenConfirm( PyObject* kwds );

		bool inferTypeFromValue();
		bool inferTypeFromRange();
		void inferTypeFromExpected();

		void checkValueAgainstType( SPELLpyValue& value );
		void checkValueAgainstRange( SPELLpyValue& value );
		void checkValueAgainstExpected( SPELLpyValue& value );

		void checkTypeConsistent();
		void checkFormatConsistent();
		void checkRangeConsistent();
		void checkExpectedConsistent();

		std::string formatValue( SPELLpyValue& value );

		bool shouldNotify();

    // DATA MEMBERS //////////////////////////////////////////////////////////

		std::string m_name;
		SPELLpyValue m_value;
		std::string m_type;
		std::string m_format;
		bool m_confirmGet;
		std::vector<SPELLpyValue> m_expected;
		std::vector<SPELLpyValue> m_range;
		SPELLdtaContainer* m_container;
};


/*@}*/
#endif
