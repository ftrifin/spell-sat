// ################################################################################
// FILE       : SPELLdtaContainer.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Data variable container implementation
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_DTA_CONTAINER_H__
#define __SPELL_DTA_CONTAINER_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"
#include "SPELL_UTIL/SPELLpythonHelper.H"
// Local includes ----------------------------------------------------------
#include "SPELL_DTA/SPELLdtaVariable.H"
// System includes ---------------------------------------------------------
#include "structmember.h"

// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////
// GLOBALS /////////////////////////////////////////////////////////////////

/** \addtogroup SPELL_DTA */
/*@{*/

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Variable container implementation
 **
 *////////////////////////////////////////////////////////////////////////////
class SPELLdtaContainer
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLdtaContainer( const std::string& name = "" );

		//////////////////////////////////////////////////////////////////////
		/** Destructor
		**////////////////////////////////////////////////////////////////////
		~SPELLdtaContainer();

    // METHODS ///////////////////////////////////////////////////////////////

		std::string getContainerName() { return m_name; };

		//////////////////////////////////////////////////////////////////////
		/** Set variable value
		**////////////////////////////////////////////////////////////////////
		void setValue( PyObject* key, PyObject* value );

		//////////////////////////////////////////////////////////////////////
		/** Get variable value
		**////////////////////////////////////////////////////////////////////
		PyObject* getValue( PyObject* key );

		//////////////////////////////////////////////////////////////////////
		/** Get variable reference
		**////////////////////////////////////////////////////////////////////
		PyObject* getValueEx( PyObject* key );

		//////////////////////////////////////////////////////////////////////
		/** Check key existence
		**////////////////////////////////////////////////////////////////////
		bool hasKey( PyObject* key );

		//////////////////////////////////////////////////////////////////////
		/** Increment reference count
		**////////////////////////////////////////////////////////////////////
		void incref();

		//////////////////////////////////////////////////////////////////////
		/** Get variable names in order of creation
		**////////////////////////////////////////////////////////////////////
		PyObject* getKeys();

		//////////////////////////////////////////////////////////////////////
		/** Obtain wrapped dict
		**////////////////////////////////////////////////////////////////////
		PyObject* getDict() { return m_dict; };

		//////////////////////////////////////////////////////////////////////
		/** Obtain wrapped dict size
		**////////////////////////////////////////////////////////////////////
		Py_ssize_t getSize() { return PyDict_Size(m_dict); };

		//////////////////////////////////////////////////////////////////////
		/** Enable or disable notifications for this instance
		**////////////////////////////////////////////////////////////////////
		void setNotificationsEnabled( bool enabled ) { m_notificationsEnabled = enabled; };

		//////////////////////////////////////////////////////////////////////
		/** Enable or disable notifications for this instance
		**////////////////////////////////////////////////////////////////////
		bool areNotificationsEnabled() { return m_notificationsEnabled; };

		//////////////////////////////////////////////////////////////////////
		/** Enable or disable notifications
		**////////////////////////////////////////////////////////////////////
		static void setGlobalNotificationsEnabled( bool enabled ) { s_notificationsEnabled = enabled; };

		//////////////////////////////////////////////////////////////////////
		/** Enable or disable notifications
		**////////////////////////////////////////////////////////////////////
		static bool areGlobalnotificationsEnabled() { return s_notificationsEnabled; };

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the container name */
		std::string m_name;
		/** Holds the wrapped dictionary */
		PyObject* m_dict;
		/** Holds the creation order of variables */
		std::vector<std::string> m_varOrder;
		/** Instance notifications flag */
		bool m_notificationsEnabled;
		/** Notifications flag */
		static bool s_notificationsEnabled;
};


/*@}*/
#endif
