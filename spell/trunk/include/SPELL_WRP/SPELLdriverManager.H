// ################################################################################
// FILE       : SPELLdriverManager.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: SPELL driver manager wrapper
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_DRIVERMGR_H__
#define __SPELL_DRIVERMGR_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_WRP */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 *  \brief Wrapper for the SPELL driver manager.
 *
 *  \par Description and usage:
 *
 *  	This class wraps the SPELL driver manager instance existing on the
 *  	Python layer. It provides basic access to the most relevant methods
 *  	of the spell.lib.DriverManager class. This wrapper is implemented as a
 *  	singleton, and it is used in the SPELLexecutor class to load/unload
 *  	the SPELL driver during the procedure execution life cycle.
 *
 * \see SPELLexecutor, SPELLbase
 */
//////////////////////////////////////////////////////////////////////////////
class SPELLdriverManager
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLdriverManager();

    // STATIC ////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the singleton instance.
		 *
		 * \return The singleton instance.
		**////////////////////////////////////////////////////////////////////
		static SPELLdriverManager& instance();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Setup (load) the SPELL driver.
		 *
		 * \param ctxName IN: the name of the current context.
		**////////////////////////////////////////////////////////////////////
		void setup( std::string ctxName );

		//////////////////////////////////////////////////////////////////////
		/** Cleanup (unload) the SPELL driver.
		 *
		 * \param shutdown IN: used to differentiate partial from complete
		 *  driver cleanups.
		**////////////////////////////////////////////////////////////////////
		void cleanup( bool shutdown );

		//////////////////////////////////////////////////////////////////////
		/** Obtain the TM interface object.
		 *
		 * \return Python object of the TM interface.
		**////////////////////////////////////////////////////////////////////
		PyObject* getTMinterface();

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLdriverManager();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Access the DriverManager python class instance.
		 *
		 * \return The python object corresponding to the instance.
		**////////////////////////////////////////////////////////////////////
		PyObject* getDriverManagerObject();

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the driver manager instance */
		PyObject* m_dManager;
		/** Holds the singleton instance */
		static SPELLdriverManager* s_instance;
};

/*@}*/
#endif
