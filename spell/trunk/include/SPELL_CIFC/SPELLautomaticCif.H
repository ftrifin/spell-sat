// ################################################################################
// FILE       : SPELLautomaticCif.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Automatic (non-interactive) client interface implementation
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_AUTOCLIENTIF_H__
#define __SPELL_AUTOCLIENTIF_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_CIF/SPELLcif.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_CIFC Command-line client interfaces (SPELL_CIFC)
 *
 * This module defines two alternative interfaces for the SPELL Executor,
 * both based on command-line executions. The first interface, SPELLstandaloneCif
 * creates a N-Curses interface to control a single procedure execution.
 * The second, SPELLautomaticCif is mean to be used for automatic (non-interactive)
 * execution of procedures.
 *
 * */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Automatic client interface.
 **
 ** \par Description and usage:
 **
 ** 	This interface is used when procedures/scripts are
 **  	executed in batch mode. No user interaction is foreseen. Prompt
 **  	answers are given in a text file.
 **
 ** 	It is instantiated in the SPELL Executor Command process when the
 **  	selected operation mode is non-interactive.
 **
 **     No concurrency issues foreseen.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLautomaticCif: public SPELLcif
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLautomaticCif( const std::string& promptFile, const std::string& procArguments );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLautomaticCif();

	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////


		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::canClose(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		void canClose() {
			;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::waitClose(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		void waitClose() {
			;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::resetClose(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		void resetClose() {
			;
		}


    //====================================================================
    // Python bindings start (see SPELLcif class)
    //====================================================================


		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void specificNotifyUserActionSet( const std::string& label, const unsigned int severity );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void specificNotifyUserActionUnset();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void specificNotifyUserActionEnable( bool enable );

		//////////////////////////////////////////////////////////////////////
		/** Notify a variable change.
		**////////////////////////////////////////////////////////////////////
		void specificNotifyVariableChange(const std::vector<SPELLvarInfo>& added,
				                  const std::vector<SPELLvarInfo>& changed,
				                  const std::vector<SPELLvarInfo>& deleted);

		//////////////////////////////////////////////////////////////////////
		/** Notify a variable scope change.
		**////////////////////////////////////////////////////////////////////
		void specificNotifyVariableScopeChange( const std::string& scopeName,
				                        const std::vector<SPELLvarInfo>& globals,
				                        const std::vector<SPELLvarInfo>& locals );


		//////////////////////////////////////////////////////////////////////
		/** Open subprocedure.
		 *
		 * \param procId IN: identifier of the subprocedure
		 * \param callingLine IN: line where the procedure start call is
		 * \param args IN: arguments for the subprocedure
		 * \param automatic IN: automatic mode flag
		 * \param blocking IN: blocking mode flag
		 * \param visible IN: visible mode flag
		 *
		 * \returns The procedure identifier with instance number.
		**////////////////////////////////////////////////////////////////////
		std::string specificOpenSubprocedure( const std::string& procId,
											  int callingLine,
											  const std::string& args, bool automatic, bool blocking, bool visible );

		//////////////////////////////////////////////////////////////////////
		/** Close the given child procedure.
		 *
		 * \param procId IN: child procedure identifier.
		**////////////////////////////////////////////////////////////////////
		void specificCloseSubprocedure( const std::string& procId );

		//////////////////////////////////////////////////////////////////////
		/** Kill the given child procedure.
		 *
		 * \param procId IN: child procedure identifier.
		**////////////////////////////////////////////////////////////////////
		void specificKillSubprocedure( const std::string& procId );



		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void log( const std::string& msg );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		//std::string prompt( const SPELLpromptDefinition& definition );

    //====================================================================
    // Python bindings end
    //====================================================================

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Load the answers for prompts
		**////////////////////////////////////////////////////////////////////
		void loadPromptAnswers();

		//////////////////////////////////////////////////////////////////////
		/** Perform an automatic prompt
		**////////////////////////////////////////////////////////////////////
		std::string automaticPrompt( const SPELLpromptDefinition& def );


		//////////////////////////////////////////////////////////////////////
		/** Specific code for NotifyLine
		 *////////////////////////////////////////////////////////////////////
		void specificNotifyLine();

		//////////////////////////////////////////////////////////////////////
		/** Specific code for NotifyLine
		 *////////////////////////////////////////////////////////////////////
		void specificNotifyCall();

		//////////////////////////////////////////////////////////////////////
		/** Specific code for NotifyLine
		 *////////////////////////////////////////////////////////////////////
		void specificNotifyReturn();

		//////////////////////////////////////////////////////////////////////
		/** Specific code of NotifyStatus
		 *////////////////////////////////////////////////////////////////////
		void specificNotifyStatus( const SPELLstatusInfo& st );

		//////////////////////////////////////////////////////////////////////
		/** Specific code of Notify
		 *////////////////////////////////////////////////////////////////////
		void specificNotify( ItemNotification notification );

		//////////////////////////////////////////////////////////////////////
		/** Specific code for NotifyError
		 *
		 * \param error IN: error message
		 * \param reason IN: error cause, if known
		 * \param fatal IN: true if the error cannot be recovered
		**////////////////////////////////////////////////////////////////////
		void specificNotifyError( const std::string& error, const std::string& reason, bool fatal );

		//////////////////////////////////////////////////////////////////////
		/** Specific code of Write
		 *////////////////////////////////////////////////////////////////////
		void specificWrite( const std::string& msg, unsigned int scope = 2 );


		//////////////////////////////////////////////////////////////////////
		/** Specific code of Warning
		 *////////////////////////////////////////////////////////////////////
		//virtual void warning( const std::string& msg, unsigned int scope = 2) = 0;
		void specificWarning( const std::string& msg, unsigned int scope = 2 );


		//////////////////////////////////////////////////////////////////////
		/** Specific code of Error
		 *////////////////////////////////////////////////////////////////////
		void specificError( const std::string& msg, unsigned int scope = 2 );

		//////////////////////////////////////////////////////////////////////
		/** Specific code for Prompt
		 *////////////////////////////////////////////////////////////////////
		void specificPrompt( const SPELLpromptDefinition& def, std::string& rawAnswer, std::string& answerToShow );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::setup()
		**////////////////////////////////////////////////////////////////////
		void specificSetup( const SPELLcifStartupInfo& info );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::cleanup()
		**////////////////////////////////////////////////////////////////////
		void specificCleanup( bool force );



	// DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////

		typedef std::vector<std::string> AnswerList;

    // LIFECYCLE /////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////
		std::string m_promptFilename;
		AnswerList m_promptAnswers;
		unsigned int m_promptAnswerIndex;
};

/*@}*/
#endif
