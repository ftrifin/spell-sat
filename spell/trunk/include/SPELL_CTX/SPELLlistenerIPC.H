// ################################################################################
// FILE       : SPELLlistenerIPC.H
// DATE       : Apr 11, 2011
// PROJECT    : SPELL
// DESCRIPTION: IPC interface for listener
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_LISTENER_IPC_H__
#define __SPELL_LISTENER_IPC_H__

// FILES TO INCLUDE //////////////////////////////////////////////////////////
// Local includes ------------------------------------------------------------
// Project includes ----------------------------------------------------------
#include "SPELL_SYN/SPELLmutex.H"
#include "SPELL_IPC/SPELLipcClientInterface.H"

/** \addtogroup SPELL_CTX */
/*@{*/


// FORWARD REFERENCES ////////////////////////////////////////////////////////
class SPELLcontext;
// TYPES /////////////////////////////////////////////////////////////////////
// DEFINES ///////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLlistenerIPC : public SPELLipcInterfaceListener
{
public: //--------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLlistenerIPC();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLlistenerIPC();

	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Setup the interface
		**////////////////////////////////////////////////////////////////////
		void setup();

		//////////////////////////////////////////////////////////////////////
		/** Cleanup the interface
		**////////////////////////////////////////////////////////////////////
		void cleanup();

	    //////////////////////////////////////////////////////////////////////
	    /** Send a message to a client
	    **////////////////////////////////////////////////////////////////////
		void sendMessage( const SPELLipcMessage& msg );

	    //////////////////////////////////////////////////////////////////////
	    /** Send a request to a client
	    **////////////////////////////////////////////////////////////////////
		SPELLipcMessage sendRequest( const SPELLipcMessage& msg, unsigned long timeoutMsec );

	// DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

		friend class SPELLipcInterface;

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//====================================================================
		// LISTENER REQUEST HANDLING
		//====================================================================

		void message_CloseContext();

		SPELLipcMessage request_CanClose( const SPELLipcMessage& msg );

		//====================================================================
		// INTERNAL IPC METHODS
		//====================================================================

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLipcInterfaceListener
	    **////////////////////////////////////////////////////////////////////
	    void processMessage( const SPELLipcMessage& msg );

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLipcInterfaceListener
	    **////////////////////////////////////////////////////////////////////
	    SPELLipcMessage processRequest( const SPELLipcMessage& msg );

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLipcInterfaceListener
	    **////////////////////////////////////////////////////////////////////
	    void processConnectionError( int clientKey, std::string error, std::string message );

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLipcInterfaceListener
	    **////////////////////////////////////////////////////////////////////
	    void processConnectionClosed( int clientKey );

private: //-------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the server interface for listener */
		SPELLipcClientInterface* m_ipc;

};

/*@}*/
#endif
