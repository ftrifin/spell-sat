// ################################################################################
// FILE       : SPELLclient.H
// DATE       : Apr 11, 2011
// PROJECT    : SPELL
// DESCRIPTION: Client manager and controller
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_CLIENT_H__
#define __SPELL_CLIENT_H__

// FILES TO INCLUDE //////////////////////////////////////////////////////////
// Local includes ------------------------------------------------------------
#include "SPELL_CTX/SPELLclientIPC.H"
#include "SPELL_CTX/SPELLclientMode.H"
// Project includes ----------------------------------------------------------

/** \addtogroup SPELL_CTX */
/*@{*/


// FORWARD REFERENCES ////////////////////////////////////////////////////////
// TYPES /////////////////////////////////////////////////////////////////////
// DEFINES ///////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLclient : public SPELLclientListener
{
public: //--------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////

		typedef std::map<std::string,SPELLclientMode> ProcedureList;

	// LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLclient( int clientKey, const std::string& host, SPELLclientIPC& ipc );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLclient();

	// METHODS ///////////////////////////////////////////////////////////////

	    //////////////////////////////////////////////////////////////////////
	    /** Send a message to the client
	    **////////////////////////////////////////////////////////////////////
	    virtual void sendMessageToClient( const SPELLipcMessage& msg );

	    //////////////////////////////////////////////////////////////////////
	    /** Send a request to the client
	    **////////////////////////////////////////////////////////////////////
	    virtual SPELLipcMessage sendRequestToClient( const SPELLipcMessage& msg );

	    //////////////////////////////////////////////////////////////////////
	    /** Send a request to the client with explicit timeout
	    **////////////////////////////////////////////////////////////////////
	    virtual SPELLipcMessage sendRequestToClient( const SPELLipcMessage& msg, unsigned long timeoutMSec );

	    //////////////////////////////////////////////////////////////////////
	    /** Get client IPC key
	    **////////////////////////////////////////////////////////////////////
		int getClientKey() const { return m_ipcKey; };

	    //////////////////////////////////////////////////////////////////////
	    /** Get client host
	    **////////////////////////////////////////////////////////////////////
		const std::string getClientHost() const { return m_host; };

	    //////////////////////////////////////////////////////////////////////
	    /**
	    **////////////////////////////////////////////////////////////////////
	    void addProcedure( const std::string& procId, const SPELLclientMode& mode );

	    //////////////////////////////////////////////////////////////////////
	    /**
	    **////////////////////////////////////////////////////////////////////
	    void removeProcedure( const std::string& procId );

	    //////////////////////////////////////////////////////////////////////
	    /**
	    **////////////////////////////////////////////////////////////////////
	    ProcedureList getProcedures();

	    //////////////////////////////////////////////////////////////////////
	    /**
	    **////////////////////////////////////////////////////////////////////
	    void cancelRequestsToClient();

	// DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

		friend class SPELLclientInterestList;

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//====================================================================
		// INTERNAL IPC METHODS
		//====================================================================

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLclientListener.
	    **////////////////////////////////////////////////////////////////////
	    void processMessageFromClient( const SPELLipcMessage& msg );

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLclientListener.
	    **////////////////////////////////////////////////////////////////////
	    SPELLipcMessage processRequestFromClient( const SPELLipcMessage& msg );

private: //-------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////

	    typedef std::list<std::string> RelatedProcedures;

	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the client information */
		int m_ipcKey;
		std::string m_host;
		/** Holds the IPC client proxy */
		SPELLclientIPC& m_clientIPC;
		/** Holds the list of related procedures */
		ProcedureList m_procedures;
		/** Timeout for requests sent to clients */
		unsigned int m_ipcTimeoutGuiRequestMsec;
};

/*@}*/
#endif
