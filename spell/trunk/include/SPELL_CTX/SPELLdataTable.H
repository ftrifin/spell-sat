// ################################################################################
// FILE       : SPELLdataTable.H
// DATE       : Apr 11, 2011
// PROJECT    : SPELL
// DESCRIPTION: Shared data table
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_DATA_TABLE_H__
#define __SPELL_DATA_TABLE_H__

// FILES TO INCLUDE //////////////////////////////////////////////////////////
// Local includes ------------------------------------------------------------
// Project includes ----------------------------------------------------------
#include "SPELL_SYN/SPELLmutex.H"

/** \addtogroup SPELL_CTX */
/*@{*/


// FORWARD REFERENCES ////////////////////////////////////////////////////////
// TYPES /////////////////////////////////////////////////////////////////////
// DEFINES ///////////////////////////////////////////////////////////////////

static const std::string GLOBAL_SCOPE = "__NONE__";
static const std::string NO_EXPECTED = "__NONE__";

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLdataTable
{
public: //--------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////

		typedef std::list<std::string> KeyList;

	// LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLdataTable();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLdataTable();

	// METHODS ///////////////////////////////////////////////////////////////

	    //////////////////////////////////////////////////////////////////////
	    /** Set scope name
	    **////////////////////////////////////////////////////////////////////
		void setScope( const std::string& scopeName ) { m_scope = scopeName; };

	    //////////////////////////////////////////////////////////////////////
	    /** Obtain a variable value
	    **////////////////////////////////////////////////////////////////////
	    std::string get( const std::string& name );

	    //////////////////////////////////////////////////////////////////////
	    /** List of variable names
	    **////////////////////////////////////////////////////////////////////
	    KeyList getVariableNames();

	    //////////////////////////////////////////////////////////////////////
	    /** Set a variable value or create a variable with initial value
	    **////////////////////////////////////////////////////////////////////
	    void set( const std::string& name, const std::string& value );

	    //////////////////////////////////////////////////////////////////////
	    /** Remove a variable
	    **////////////////////////////////////////////////////////////////////
	    bool clear( const std::string& name );

	    //////////////////////////////////////////////////////////////////////
	    /** Remove all variables
	    **////////////////////////////////////////////////////////////////////
	    void clear();

	    //////////////////////////////////////////////////////////////////////
	    /** Get the scope name
	    **////////////////////////////////////////////////////////////////////
		std::string getScopeName() { return m_scope; };

	// DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////

		typedef std::map<std::string,std::string> DataMap;

	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the map of data variables */
		DataMap m_map;
		/** Holds the scope name */
		std::string m_scope;
		/** Synchronization mutex */
		SPELLmutex m_lock;
};

/*@}*/
#endif
