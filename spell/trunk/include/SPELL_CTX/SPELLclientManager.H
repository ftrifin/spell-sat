// ################################################################################
// FILE       : SPELLclientManager.H
// DATE       : Apr 26, 2011
// PROJECT    : SPELL
// DESCRIPTION: SPELL client manager
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_CLIENT_MANAGER_H__
#define __SPELL_CLIENT_MANAGER_H__

// FILES TO INCLUDE //////////////////////////////////////////////////////////
// Local includes ------------------------------------------------------------
#include "SPELL_CTX/SPELLclientNotifier.H"
#include "SPELL_CTX/SPELLclientOperation.H"
#include "SPELL_CTX/SPELLexecutorOperation.H"
// Project includes ----------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"
#include "SPELL_SYN/SPELLmutex.H"

/** \addtogroup SPELL_CTX */
/*@{*/


// FORWARD REFERENCES ////////////////////////////////////////////////////////
class SPELLclient;
class SPELLclientIPC;
// TYPES /////////////////////////////////////////////////////////////////////
// DEFINES ///////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLclientManager
{
public: //--------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLclientManager();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLclientManager();

	// STATIC ////////////////////////////////////////////////////////////////

		static SPELLclientManager& instance();

	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Assign the IPC interface
		**////////////////////////////////////////////////////////////////////
		void setIPC( SPELLclientIPC* ipc ) { m_ipc = ipc; };

		//////////////////////////////////////////////////////////////////////
		/** Add a new client
		**////////////////////////////////////////////////////////////////////
		void clientLogin( int key, const std::string& host );

		//////////////////////////////////////////////////////////////////////
		/** Remove a client
		**////////////////////////////////////////////////////////////////////
		void clientLogout( int key );

		//////////////////////////////////////////////////////////////////////
		/** Remove a lost client
		**////////////////////////////////////////////////////////////////////
		void clientLost( int key );

		//////////////////////////////////////////////////////////////////////
		/** Get client reference
		**////////////////////////////////////////////////////////////////////
		SPELLclient* getClient( int key );

		//////////////////////////////////////////////////////////////////////
		/** Get existing client keys
		**////////////////////////////////////////////////////////////////////
		std::list<int> getClientKeys();

		//////////////////////////////////////////////////////////////////////
		/** Get clients monitoring the given procedure
		**////////////////////////////////////////////////////////////////////
		std::list<std::string> getMonitoringClients( const std::string& procId );

		//////////////////////////////////////////////////////////////////////
		/** Get client keys monitoring the given procedure
		**////////////////////////////////////////////////////////////////////
		std::list<int> getMonitoringClientsKeys( const std::string& procId );

		//////////////////////////////////////////////////////////////////////
		/** Remove all clients
		**////////////////////////////////////////////////////////////////////
		void removeAllClients();

		//////////////////////////////////////////////////////////////////////
		/** Client to control a procedure
		**////////////////////////////////////////////////////////////////////
		void setExecutorController( SPELLclient* client, SPELLexecutor* exec );

		//////////////////////////////////////////////////////////////////////
		/** Remove controller
		**////////////////////////////////////////////////////////////////////
		void removeExecutorController( SPELLclient* client, SPELLexecutor* exec, bool notifyExecutor );

		//////////////////////////////////////////////////////////////////////
		/** Client to monitor a procedure
		**////////////////////////////////////////////////////////////////////
		void startMonitorExecutor( SPELLclient* client, SPELLexecutor* exec );

		//////////////////////////////////////////////////////////////////////
		/** Client to monitor a procedure
		**////////////////////////////////////////////////////////////////////
		void stopMonitorExecutor( SPELLclient* client, SPELLexecutor* exec );

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		void notifyClients( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		void notifyMonitoringClients( const SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		void completeMonitoringInfo( const std::string& procId, SPELLipcMessage& msg );


	// DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		void notifyClientOperation( int clientKey,
				                    const std::string& host,
				                    const SPELLclientOperation& operation );

private: //-------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////

		typedef std::map<int,SPELLclient*> ClientMap;

		typedef std::list<SPELLclientNotifier*> NotifierList;

		typedef std::map<std::string,NotifierList> NotifierMap;

	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the list of existing client notifiers */
		NotifierMap					m_notifiers;
		/** Holds the set of existing clients */
		ClientMap					m_clientMap;
		/** Synchronization lock for clients */
		SPELLmutex					m_clientLock;
		/** Reference to the client IPC */
		SPELLclientIPC* 			m_ipc;
		/** Singleton instance */
		static SPELLclientManager*  s_instance;
};

/*@}*/
#endif
