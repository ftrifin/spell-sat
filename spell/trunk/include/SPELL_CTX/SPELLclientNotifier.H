// ################################################################################
// FILE       : SPELLclientNotifier.H
// DATE       : Apr 11, 2011
// PROJECT    : SPELL
// DESCRIPTION: Client notifier for monitoring mode
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_CLIENT_NOTIFIER_H__
#define __SPELL_CLIENT_NOTIFIER_H__

// FILES TO INCLUDE //////////////////////////////////////////////////////////
// Local includes ------------------------------------------------------------
#include "SPELL_CTX/SPELLclient.H"
#include "SPELL_CTX/SPELLexecutor.H"
#include "SPELL_CTX/SPELLexecutorListener.H"
// Project includes ----------------------------------------------------------
#include "SPELL_SYN/SPELLthread.H"

/** \addtogroup SPELL_CTX */
/*@{*/


// FORWARD REFERENCES ////////////////////////////////////////////////////////
// TYPES /////////////////////////////////////////////////////////////////////
// DEFINES ///////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLclientNotifier : public SPELLexecutorListener, public SPELLthread
{
public: //--------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLclientNotifier( SPELLclient* client, SPELLexecutor* exec );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLclientNotifier();

	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Thread method
		**////////////////////////////////////////////////////////////////////
		void run();

		//////////////////////////////////////////////////////////////////////
		/** Stop the notifier
		**////////////////////////////////////////////////////////////////////
		void stop();

		//////////////////////////////////////////////////////////////////////
		/** Get the associated client key
		**////////////////////////////////////////////////////////////////////
		int getClientKey() { return m_client->getClientKey(); };

		//////////////////////////////////////////////////////////////////////
		/** Get the associated client key
		**////////////////////////////////////////////////////////////////////
		std::string getClientHost() { return m_client->getClientHost(); };

	// DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
	    /** \see SPELLexecutorListener
	    **////////////////////////////////////////////////////////////////////
	    void processMessageFromExecutor( SPELLipcMessage msg );

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLexecutorListener
	    **////////////////////////////////////////////////////////////////////
	    SPELLipcMessage processRequestFromExecutor( SPELLipcMessage msg );

private: //-------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////

	    /** Holds the string identifier */
	    std::string m_id;
	    /** Holds the notified client */
	    SPELLclient* m_client;
	    /** Holds the notifier executor */
	    SPELLexecutor* m_exec;
	    /** True if the notifier keeps working */
	    bool m_working;
	    /** Holds the vector of requests */
	    SPELLqueue<SPELLipcMessage> m_requests;
	    /** Holds the request being processed */
	    SPELLipcMessage m_currentRequest;
	    /** Synchronization lock */
	    SPELLmutex m_lock;
};

/*@}*/
#endif
