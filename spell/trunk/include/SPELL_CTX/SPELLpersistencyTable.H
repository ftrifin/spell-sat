// ################################################################################
// FILE       : SPELLpersistencyTable.H
// DATE       : Apr 11, 2011
// PROJECT    : SPELL
// DESCRIPTION: Keeps persistency of open executors
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_PERSISTENCY_TABLE_H__
#define __SPELL_PERSISTENCY_TABLE_H__

// FILES TO INCLUDE //////////////////////////////////////////////////////////
// Local includes ------------------------------------------------------------
// Project includes ----------------------------------------------------------
#include "SPELL_UTIL/SPELLutils.H"

/** \addtogroup SPELL_CTX */
/*@{*/


// FORWARD REFERENCES ////////////////////////////////////////////////////////
// TYPES /////////////////////////////////////////////////////////////////////
// DEFINES ///////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief
 **
**////////////////////////////////////////////////////////////////////////////
struct SPELLexecutorPersistency
{
	std::string instanceId;
	std::string timeId;
	std::string parentId;
	int ipcPort;
	pid_t pid;
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLpersistencyTable
{
public: //--------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLpersistencyTable( const std::string& ctxName );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLpersistencyTable();

	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Load previous persistency files
		 *
		 * \return True if there are persistency data
		**////////////////////////////////////////////////////////////////////
		bool load();

		//////////////////////////////////////////////////////////////////////
		/** Get the executor ids with persistency data
		**////////////////////////////////////////////////////////////////////
		const std::vector<std::string> getRegisteredExecutors() const;

		//////////////////////////////////////////////////////////////////////
		/** Get the executor ids with persistency data
		**////////////////////////////////////////////////////////////////////
		const SPELLexecutorPersistency getExecutorPersistency( const std::string& instanceId ) const;

		//////////////////////////////////////////////////////////////////////
		/** Register an executor
		**////////////////////////////////////////////////////////////////////
		void registerExecutor( const std::string& instanceId, const std::string& timeId, const std::string& parentId, int ipcPort, pid_t pid );

		//////////////////////////////////////////////////////////////////////
		/** De-register an executor
		**////////////////////////////////////////////////////////////////////
		void deregisterExecutor( const std::string& instanceId );

	// DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////

		typedef std::map<std::string,SPELLexecutorPersistency> PersistencyMap;
	// STATIC ////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		void dumpToFile();

	// DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the persistency file name */
		std::string m_persistencyFileName;
		/** Holds the persistency file */
		std::fstream m_persistencyFile;
		/** Map of executor data */
		PersistencyMap m_data;
};

/*@}*/
#endif
