// ################################################################################
// FILE       : SPELLprocessManager.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Process manager
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_PROCESSMGR_H__
#define __SPELL_PROCESSMGR_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Local includes ----------------------------------------------------------
#include "SPELL_PRC/SPELLprocess.H"
// Project includes --------------------------------------------------------
#include "SPELL_SYN/SPELLmutex.H"
// System includes ---------------------------------------------------------


/** \addtogroup SPELL_PRC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
class SPELLprocessListener;
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Process listener definition
 **
 ** \par Description and usage:
 **
 ** 	Implemented by entities interested on the status of processes.
 **
 **     Once registered the listener in the process manager, it will
 ** 	notify to the listener any process status changes.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLprocessListener
{
public://--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLprocessListener() {};

	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Notify the given process has started.
		 *
		 * \param identifier IN: unique identifier of the process.
		**////////////////////////////////////////////////////////////////////
		virtual void processStarted( const std::string& identifier ) = 0;

		//////////////////////////////////////////////////////////////////////
		/** Notify the given process has finished.
		 *
		 * \param identifier IN: unique identifier of the process.
		 * \param retValue IN: process exit code.
		**////////////////////////////////////////////////////////////////////
		virtual void processFinished( const std::string& identifier, const int& retValue ) = 0;

		//////////////////////////////////////////////////////////////////////
		/** Notify the given process has been killed.
		 *
		 * \param identifier IN: unique identifier of the process.
		**////////////////////////////////////////////////////////////////////
		virtual void processKilled( const std::string& identifier ) = 0;

		//////////////////////////////////////////////////////////////////////
		/** Notify the given process has failed to start.
		 *
		 * \param identifier IN: unique identifier of the process.
		**////////////////////////////////////////////////////////////////////
		virtual void processFailed( const std::string& identifier ) = 0;
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Manager of all subprocesses
 **
 ** \par Description and usage:
 **
 ** 	Singleton used to create, control and monitor child processes.
 **     Once a listener is registered for a given process, it can
 ** 	be started/killed/etc and status changes are notified back.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLprocessManager
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLprocessManager();

    // STATIC ////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Provide the singleton instance.
		 *
		 * \return The singleton instance.
		**////////////////////////////////////////////////////////////////////
		static SPELLprocessManager& instance();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Start a process.
		 *
		 * \param identifier IN: unique process identifier
		 * \param command IN: command to start the process
		**////////////////////////////////////////////////////////////////////
		void startProcess( const std::string& identifier, const std::string& command );

		//////////////////////////////////////////////////////////////////////
		/** Monitor a process that is not a child.
		 *
		 * \param identifier IN: unique process identifier
		 * \param pid IN: process identifier
		**////////////////////////////////////////////////////////////////////
		void attachProcess( const std::string& identifier, int pid );

		//////////////////////////////////////////////////////////////////////
		/** Notify that a process that is not a child is about to be closed.
		 *
		 * \param identifier IN: unique process identifier
		**////////////////////////////////////////////////////////////////////
		void aboutToCloseProcess( const std::string& identifier );

		//////////////////////////////////////////////////////////////////////
		/** Kill the given process.
		 *
		 * \param identifier IN: unique process identifier
		**////////////////////////////////////////////////////////////////////
		void killProcess( const std::string& identifier );

		//////////////////////////////////////////////////////////////////////
		/** Wait the given process to finish.
		 *
		 * \param identifier IN: unique process identifier
		 *
		 * \returns The process exit code.
		**////////////////////////////////////////////////////////////////////
		int waitProcess( const std::string& identifier );

		//////////////////////////////////////////////////////////////////////
		/** Get the PID of the given process
		 *
		 * \param identifier IN: unique process identifier
		 *
		 * \returns The process PID.
		**////////////////////////////////////////////////////////////////////
		int getProcessId( const std::string& identifier );

		//////////////////////////////////////////////////////////////////////
		/** Get the process status
		 *
		 * \returns The process status code
		**////////////////////////////////////////////////////////////////////
		SPELLprocessStatus getProcessStatus( const std::string& identifier );

		//////////////////////////////////////////////////////////////////////
		/** Clear the given process from the manager.
		 *
		 * \param identifier IN: unique process identifier
		 *
		**////////////////////////////////////////////////////////////////////
		void clearProcess( const std::string& identifier );

		//////////////////////////////////////////////////////////////////////
		/** Register a process listener
		 *
		 * \param identifier IN: unique process identifier
		 * \param listener IN: listener reference.
		**////////////////////////////////////////////////////////////////////
		void addListener( const std::string& identifier, SPELLprocessListener* listener );

		//////////////////////////////////////////////////////////////////////
		/** Unregister a process listener
		 *
		 * \param identifier IN: unique process identifier
		 * \param listener IN: listener reference.
		**////////////////////////////////////////////////////////////////////
		void removeListener( const std::string& identifier, SPELLprocessListener* listener );

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    friend class SPELLprocess;

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLprocessManager();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Notify listeners that a given process has started.
		 *
		 * \param identifier IN: process unique identifier.
		**////////////////////////////////////////////////////////////////////
		void fireProcessStarted( const std::string& identifier );

		//////////////////////////////////////////////////////////////////////
		/** Notify listeners that a given process has finished.
		 *
		 * \param identifier IN: process unique identifier.
		 * \param retValue IN: process exit code.
		**////////////////////////////////////////////////////////////////////
		void fireProcessFinished( const std::string& identifier, int retValue );

		//////////////////////////////////////////////////////////////////////
		/** Notify listeners that a given process has been killed.
		 *
		 * \param identifier IN: process unique identifier.
		**////////////////////////////////////////////////////////////////////
		void fireProcessKilled( const std::string& identifier );

		//////////////////////////////////////////////////////////////////////
		/** Notify listeners that a given process has failed to start.
		 *
		 * \param identifier IN: process unique identifier.
		**////////////////////////////////////////////////////////////////////
		void fireProcessFailed( const std::string& identifier );

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////

		// TYPES ///////////////////////////////////////////////////////////////////
		/** Map of processes indexed by their identifiers */
		typedef std::map<std::string,SPELLprocess*> SPELLprocessMap;
		/** List of process listeners */
		typedef std::list<SPELLprocessListener*> SPELLprocessListeners;
		/** Map of process listeners lists indexed by the process identifier */
		typedef std::map<std::string, SPELLprocessListeners> SPELLprocessListenersMap;

    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Synchronization lock */
		SPELLmutex                     m_lock;
		/** Process model map */
		SPELLprocessMap                m_processes;
		/** Process listeners map */
		SPELLprocessListenersMap       m_listeners;
};

/*@}*/
#endif
