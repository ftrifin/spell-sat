// Autogenerated AST node
package com.astra.ses.spell.language.model.ast;

import com.astra.ses.spell.language.model.SimpleNode;

public class ClassDef extends stmtType
{
	public NameTokType	    name;
	public exprType[]	    bases;
	public stmtType[]	    body;
	public decoratorsType[]	decs;
	public keywordType[]	keywords;
	public exprType	        starargs;
	public exprType	        kwargs;

	public ClassDef(NameTokType name, exprType[] bases, stmtType[] body,
	        decoratorsType[] decs, keywordType[] keywords, exprType starargs,
	        exprType kwargs)
	{
		this.name = name;
		this.bases = bases;
		this.body = body;
		this.decs = decs;
		this.keywords = keywords;
		this.starargs = starargs;
		this.kwargs = kwargs;
	}

	public ClassDef(NameTokType name, exprType[] bases, stmtType[] body,
	        decoratorsType[] decs, keywordType[] keywords, exprType starargs,
	        exprType kwargs, SimpleNode parent)
	{
		this(name, bases, body, decs, keywords, starargs, kwargs);
		this.beginLine = parent.beginLine;
		this.beginColumn = parent.beginColumn;
	}

	public String toString()
	{
		StringBuffer sb = new StringBuffer("ClassDef[");
		sb.append("name=");
		sb.append(dumpThis(this.name));
		sb.append(", ");
		sb.append("bases=");
		sb.append(dumpThis(this.bases));
		sb.append(", ");
		sb.append("body=");
		sb.append(dumpThis(this.body));
		sb.append(", ");
		sb.append("decs=");
		sb.append(dumpThis(this.decs));
		sb.append(", ");
		sb.append("keywords=");
		sb.append(dumpThis(this.keywords));
		sb.append(", ");
		sb.append("starargs=");
		sb.append(dumpThis(this.starargs));
		sb.append(", ");
		sb.append("kwargs=");
		sb.append(dumpThis(this.kwargs));
		sb.append("]");
		return sb.toString();
	}

	public Object accept(VisitorIF visitor) throws Exception
	{
		return visitor.visitClassDef(this);
	}

	public void traverse(VisitorIF visitor) throws Exception
	{
		if (name != null) name.accept(visitor);
		if (bases != null)
		{
			for (int i = 0; i < bases.length; i++)
			{
				if (bases[i] != null) bases[i].accept(visitor);
			}
		}
		if (body != null)
		{
			for (int i = 0; i < body.length; i++)
			{
				if (body[i] != null) body[i].accept(visitor);
			}
		}
		if (decs != null)
		{
			for (int i = 0; i < decs.length; i++)
			{
				if (decs[i] != null) decs[i].accept(visitor);
			}
		}
		if (keywords != null)
		{
			for (int i = 0; i < keywords.length; i++)
			{
				if (keywords[i] != null) keywords[i].accept(visitor);
			}
		}
		if (starargs != null) starargs.accept(visitor);
		if (kwargs != null) kwargs.accept(visitor);
	}

}
