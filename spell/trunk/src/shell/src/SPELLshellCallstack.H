// ################################################################################
// FILE       : SPELLshellCallstack.H
// DATE       : Mar 18, 2011
// PROJECT    : SPELL
// DESCRIPTION: Call stack model for shell
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_SHELL_CALLSTACK_H__
#define __SPELL_SHELL_CALLSTACK_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLcallstackIF.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Call stack model
 **
 ** \par Description:
 **
 ** \par Usage:
 **
 ** \par Synchronization: no concurrency issues foreseen.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLshellCallstack : public SPELLcallstackIF
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLshellCallstack(): SPELLcallstackIF()
		{
			m_fakeStack = "";
			m_fakeCode = "";
		};

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLshellCallstack() {;};

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		void reset() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		const std::string& getStack() { return m_fakeStack; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		unsigned int getCurrentLine() { return 0; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		void stepOver( const SPELLstepOverMode& mode ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		const void skipCurrentLine() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		const bool isSteppingOver() { return false;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		void setStage( const std::string& id, const std::string& title ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		const std::string getStage() { return ""; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		const std::string& getCodeName() { return m_fakeCode; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		const bool isSteppingOver() const { return false; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		const int getLevel() const { return 0; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
		void moveToLevel( unsigned int level ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
	    void event_line( const std::string& file, const int& line, const std::string& name ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
	    void event_call( const std::string& file, const int& line, const std::string& name ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
	    void event_return( const std::string& file, const int& line, const std::string& name ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcallstackIF.
		**////////////////////////////////////////////////////////////////////
	    void enableNotifications( bool enable ) {;};

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
	    std::string m_fakeStack;
	    std::string m_fakeCode;
};

#endif
