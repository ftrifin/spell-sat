// ################################################################################
// FILE       : SPELLshellExecutor.H
// DATE       : Mar 18, 2011
// PROJECT    : SPELL
// DESCRIPTION: Fake executor model for shell
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_EXECUTOR_SHELL_H__
#define __SPELL_EXECUTOR_SHELL_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Local includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLexecutorIF.H"
// Project includes --------------------------------------------------------
// System includes ---------------------------------------------------------


/** \addtogroup SPELL */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Main implementation of the procedure executor
 **
 ** \par Description:
 **
 ** \par Usage:
 **
 ** \par Synchronization:
 **      No concurrency issues foreseen.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLshellExecutor: public SPELLexecutorIF
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLshellExecutor();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLshellExecutor();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

    // *******************************************************************
    // INITIALIZATION
    // *******************************************************************

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void initialize( SPELLcif* cif,
						 SPELLcontrollerIF* controller,
						 SPELLschedulerIF* scheduler,
						 SPELLcallstackIF* callstack,
						 SPELLframeManager* frameManager );

	    //////////////////////////////////////////////////////////////////////
	    /** \see SPELLexecutorIF.
	    **////////////////////////////////////////////////////////////////////
	    void prepare( const std::string& procId, const SPELLcontextConfig& ctxConfig ) {;}

	// *******************************************************************
	// COMPONENT ACCESSORS
	// *******************************************************************

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		SPELLcif& getCIF() const { return *m_cif; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		SPELLcallstackIF& getCallstack() const { return *m_callstack; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		SPELLcontrollerIF& getController() const { return *m_controller; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		SPELLschedulerIF& getScheduler() const { return *m_scheduler; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		SPELLchildManager& getChildManager() const { return *m_childMgr; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		SPELLexecutorConfig& getConfiguration() const { return *m_config; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		SPELLvariableManager& getVariableManager() const { return *m_varManager; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		SPELLframeManager& getFrameManager() const { return *m_frameManager; };

    // *******************************************************************
    // EXECUTION ENTRY POINTS
    // *******************************************************************

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void execute() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void recover() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void finalize() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void save() {;};

    // *******************************************************************
    // MAIN EXECUTION CONTROL
    // *******************************************************************

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void dispatch( PyObject* obj, PyFrameObject* frame, int what, PyObject* args ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void command( const ExecutorCommand& cmd, const bool high_priority ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void abort( const std::string& message, bool systemAborted ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void finish( const std::string& message ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void pause() {;};

    // *******************************************************************
    // STATUS INFORMATION
    // *******************************************************************

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const SPELLexecutorStatus getStatus() const { return STATUS_UNINIT; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const std::string getContextName() const { return ""; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const std::string getInstanceId() const { return ""; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const std::string getStack() const { return ""; };

    // *******************************************************************
    // EXECUTION CONFIGURATION PARAMETERS
    // *******************************************************************

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void setProcedurePath( const std::string& procPath ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void setLibraryPath( const std::string& libPath ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void setRunInto( const bool enabled ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void setByStep( const bool enabled ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void setBrowsableLib( const bool enabled ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void setExecDelay( const int delay ) {;};

    // *******************************************************************
    // LANGUAGE INTERLOCK
    // *******************************************************************

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void processLock() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void processUnlock() {;};

    // *******************************************************************
    // EXECUTION MANIPULATION
    // *******************************************************************

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const bool canSkip() { return false;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const bool goNextLine() { return false;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const bool goLabel( const std::string& label, bool programmed ) { return false;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const bool goLine( const int line ) { return false;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const bool setBreakpoint( const std::string& file, const unsigned int line, SPELLbreakpointType type ) { return false;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void clearBreakpoints() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const bool runScript( const std::string& script ) { return false;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void executeUserAction() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void setUserAction( const std::string& functionName, const std::string& actionLabel, const unsigned int severity ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void enableUserAction( const bool enable ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void dismissUserAction() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const std::string getUserActionLabel() const { return ""; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		const bool getUserActionEnabled() const { return false; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void stageReached( const std::string& id, const std::string& title ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLexecutorIF.
		**////////////////////////////////////////////////////////////////////
		void displayStage( const std::string& id, const std::string& title ) {;};

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the command controller */
		SPELLcontrollerIF*           m_controller;
		/** Holds the scheduler controller */
		SPELLschedulerIF*            m_scheduler;
		/** Holds the callstack model */
		SPELLcallstackIF*            m_callstack;
		/** Holds the reference to client interface */
		SPELLcif*                    m_cif;
		/** Holds the child procedure manager */
		SPELLchildManager*           m_childMgr;
		/** Fake configuration */
		SPELLexecutorConfig*         m_config;
		/** Holds the variable manager */
		SPELLvariableManager*        m_varManager;
		/** Holds the fake execution frame */
		SPELLframeManager*           m_frameManager;
};

#endif
