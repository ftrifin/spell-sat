// ################################################################################
// FILE       : SPELLshellCif.H
// DATE       : Mar 18, 2011
// PROJECT    : SPELL
// DESCRIPTION: CIF implementation for shell
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2014 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_STD_SHELL_H__
#define __SPELL_STD_SHELL_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"
#include "SPELL_CIF/SPELLcif.H"
#include "SPELL_CIF/SPELLnotifications.H"

/** \addtogroup SPELL */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Shell client interface
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLshellCif: public SPELLcif
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /** Constructor
    **////////////////////////////////////////////////////////////////////
	SPELLshellCif();

    //////////////////////////////////////////////////////////////////////
    /** Destructor.
    **////////////////////////////////////////////////////////////////////
    virtual ~SPELLshellCif();

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::setup()
    **////////////////////////////////////////////////////////////////////
    void setup( const SPELLcifStartupInfo& info );

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::cleanup()
    **////////////////////////////////////////////////////////////////////
    void cleanup( bool force );

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::canClose()
    **////////////////////////////////////////////////////////////////////
    void canClose();

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::waitClose()
    **////////////////////////////////////////////////////////////////////
    void waitClose();

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::resetClose()
    **////////////////////////////////////////////////////////////////////
    void resetClose();

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::getArguments(). Not used in this interface.
    **////////////////////////////////////////////////////////////////////
    std::string getArguments();

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::getCondition(). Not used in this interface.
    **////////////////////////////////////////////////////////////////////
    std::string getCondition();

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::isAutomatic(). Not used in this interface.
    **////////////////////////////////////////////////////////////////////
    bool isAutomatic();

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::isVisible(). Not used in this interface.
    **////////////////////////////////////////////////////////////////////
    bool isVisible() {return true;};

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::isBlocking(). Not used in this interface.
    **////////////////////////////////////////////////////////////////////
    bool isBlocking() {return true;}

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif::isHeadless(). Not used in this interface.
    **////////////////////////////////////////////////////////////////////
    bool isHeadless() {return false;}

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void notifyLine(){;};

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void notifyCall() {;};

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void notifyReturn() {;};

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void notifyStatus( const SPELLstatusInfo& st );

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void notifyError( const std::string& error, const std::string& reason, bool fatal );

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void notifyUserActionSet( const std::string& label, const unsigned int severity ) {
        ;
    };

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void notifyUserActionUnset() {
        ;
    };

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void notifyUserActionEnable( bool enable ) {
        ;
    };

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void notify( ItemNotification notification );

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void write( const std::string& msg, unsigned int scope );

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void warning( const std::string& msg, unsigned int scope );

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void error( const std::string& msg, unsigned int scope );

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    void log( const std::string& msg );

    //////////////////////////////////////////////////////////////////////
    /** \see SPELLcif class.
    **////////////////////////////////////////////////////////////////////
    std::string prompt( const SPELLpromptDefinition& def );

    //====================================================================
    // Python bindings end
    //====================================================================

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

};


#endif
