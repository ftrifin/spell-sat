// ################################################################################
// FILE       : SPELLwsWarmStartImpl.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Implementation of the WS interface
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_WARMSTART_IMPL_H__
#define __SPELL_WARMSTART_IMPL_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Local includes ----------------------------------------------------------
#include "SPELL_WS/SPELLwarmstart.H"
#include "SPELL_WS/SPELLwsFrame.H"
// Project includes --------------------------------------------------------
// System includes ---------------------------------------------------------

/** \addtogroup SPELL_WS */
/*@{*/

// FORWARD REFERENCES //////////////////////////////////////////////////////
// ENUMS ///////////////////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Implementation of a warmstart mechanism.
 **
 ** \par Description:
 **
 ** \par Usage:
 **
 ** \par Synchronization:
 **      No concurrency issues foreseen.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLwsWarmStartImpl : public SPELLwarmStart
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLwsWarmStartImpl();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLwsWarmStartImpl();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		void initialize( const std::string& identifier, const SPELLwsWorkingMode& mode );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		void reset();

	//========================================================================
	// METHODS TO KEEP THE SAVED STATE UPDATED
	//========================================================================

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		void notifyCall( PyFrameObject* newFrame );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		void notifyReturn();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		void notifyLine();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		void notifyStage();

	//========================================================================
	// METHODS TO CONTROL THE STORAGE PROCESS
	//========================================================================

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		SPELLwsWorkingMode getWorkingMode() const
		{
			return m_mode;
		}

	//========================================================================
	// METHODS TO CONTROL STATE MANAGEMENT
	//========================================================================

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		PyFrameObject* restoreState();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		PyFrameObject* fixState();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLwarmStart.
		**////////////////////////////////////////////////////////////////////
		void saveState();

	// DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////
	// DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

	// EXCEPTIONS ////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////////
	// TYPES /////////////////////////////////////////////////////////////////
		/** Represents a list of frame data managers */
		typedef std::vector<SPELLwsFrame*> FrameList;
	// LIFECYCLE /////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Add a new frame manager as a result of a function call in the
		 * Python layer.
		 *
		 * \param frame IN: the newly created frame.
		**////////////////////////////////////////////////////////////////////
		void addFrame( PyFrameObject* frame );

		//////////////////////////////////////////////////////////////////////
		/** Remove the frame manager on top, as a result of a return event
		 * in the Python layer. Do NOT delete Python objects associated to it.
		**////////////////////////////////////////////////////////////////////
		void removeTopFrame();

	// DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the list of frame data managers */
		FrameList m_frames;
		/** Holds the top frame always */
		SPELLwsFrame* m_topFrame;
		/** Holds the working mode */
		SPELLwsWorkingMode m_mode;
		/** Holds the data files identifier */
		std::string m_dataFileId;
		/** Recursion depth counter */
		unsigned int m_recursionDepth;
};

/*@}*/
#endif
