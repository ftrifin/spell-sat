// ################################################################################
// FILE       : SPELLipcIncoming.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Handler for incoming IPC messages
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_IPC_INCOMING_H__
#define __SPELL_IPC_INCOMING_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_IPC/SPELLipcInterfaceListener.H"
// Project includes --------------------------------------------------------
#include "SPELL_SYN/SPELLthread.H"
#include "SPELL_SYN/SPELLevent.H"


/** \addtogroup SPELL_IPC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
class SPELLipcInterface;
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Incoming request handler - base implementation.
 **
 ** \par Description and usage:
 **
 ** 	Base class of the incoming message/request handlers.
 **
 ** \see SPELLipcIncomingMessage, SPELLipcIncomingRequest
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcIncomingBase: public SPELLthread
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param msgId IN: unique identifier for the message/request.
		 * \param msg IN: the message itself.
		 * \param listener IN: IPC listener to be notified.
		**////////////////////////////////////////////////////////////////////
		SPELLipcIncomingBase( std::string msgId, SPELLipcMessage* msg,
							  SPELLipcInterfaceListener* listener );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLipcIncomingBase();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the associated message identifier.
		 *
		 * \return The message identifier
		**////////////////////////////////////////////////////////////////////
		std::string getMessageId() {
			return m_message->getId();
		};

		//////////////////////////////////////////////////////////////////////
		/** Thread main method.
		**////////////////////////////////////////////////////////////////////
		virtual void run() = 0;

		//////////////////////////////////////////////////////////////////////
		/** Cancel processor
		**////////////////////////////////////////////////////////////////////
		virtual void cancel() = 0;

		//////////////////////////////////////////////////////////////////////
		/** Wait processor to finish.
		 *
		 * \param timeoutSec IN: maximum amount of seconds to wait
		 *
		 * \return True if there was a timeout
		**////////////////////////////////////////////////////////////////////
		bool wait( long timeoutSec );

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Set processor as finished
		**////////////////////////////////////////////////////////////////////
		void finish();

    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the listener to be notified */
		SPELLipcInterfaceListener*    m_listener;
		/** The message to be processed */
		SPELLipcMessage*              m_message;
		/** Event set when the processing finishes */
		SPELLevent                    m_finishEvent;
		/** True if should be cancelled */
		bool                          m_cancel;


private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Incoming message handler
 **
 ** \par Description and usage:
 **
 ** 	Handler for oneway messages. Created by IPC interface to manage
 ** 	incoming messages (oneway) and notify the IPC listener.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcIncomingMessage: public SPELLipcIncomingBase
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 *
		 * \param msgId IN: unique identifier for the message/request.
		 * \param msg IN: the message itself.
		 * \param listener IN: IPC listener to be notified.
		**////////////////////////////////////////////////////////////////////
		SPELLipcIncomingMessage( std::string msgId, SPELLipcMessage* msg,
								 SPELLipcInterfaceListener* listener );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLipcIncomingMessage();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Thread main method.
		**////////////////////////////////////////////////////////////////////
		void run();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLincomingBase
		**////////////////////////////////////////////////////////////////////
		void cancel();

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Incoming request handler
 **
 ** \par Description and usage:
 **
 ** 	Request (synchronous) handler. Created by IPC interface to manage
 ** 	incoming requests and notify the IPC listener.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcIncomingRequest: public SPELLipcIncomingBase
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 *
		 * \param requestId IN: unique identifier for the message/request.
		 * \param msg IN: the message itself.
		 * \param listener IN: IPC listener to be notified.
		 * \param ifc IN: parent IPC interface.
		**////////////////////////////////////////////////////////////////////
		SPELLipcIncomingRequest( std::string requestId, SPELLipcMessage* msg,
								 SPELLipcInterfaceListener* listener, SPELLipcInterface* ifc );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLipcIncomingRequest();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Thread main method.
		**////////////////////////////////////////////////////////////////////
		void run();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLincomingBase.
		**////////////////////////////////////////////////////////////////////
		void cancel();

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Reference to the parent IPC interface */
		SPELLipcInterface* m_interface;
};

/*@}*/
#endif
