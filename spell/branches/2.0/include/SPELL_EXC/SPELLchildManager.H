// ################################################################################
// FILE       : SPELLchildManager.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Child procedure controller.
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_CHILDMGR_H__
#define __SPELL_CHILDMGR_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLexecutorStatus.H"
// Project includes --------------------------------------------------------
#include "SPELL_SYN/SPELLevent.H"

/** \addtogroup SPELL_EXC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Child procedure manager
 **
 ** \par Description and usage:
 **
 **		In charge of monitoring and manipulating child procedures in the
 **		executor, if any.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLchildManager
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLchildManager();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLchildManager();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Reset the component status.
		**////////////////////////////////////////////////////////////////////
		void reset();

		//////////////////////////////////////////////////////////////////////
		/** Callback for notification: change in the child procedure status.
		 *
		 * \param st IN: Child procedure status.
		**////////////////////////////////////////////////////////////////////
		void notifyChildStatus( const SPELLexecutorStatus st );

		//////////////////////////////////////////////////////////////////////
		/** Callback for notification: error in the child procedure.
		 *
		 * \param error IN: error message
		 * \param reason IN: error reason
		**////////////////////////////////////////////////////////////////////
		void notifyChildError( const std::string& error, const std::string& reason );

		//////////////////////////////////////////////////////////////////////
		/** Callback for notification: the child procedure has been closed
		**////////////////////////////////////////////////////////////////////
		void notifyChildClosed();

		//////////////////////////////////////////////////////////////////////
		/** Callback for notification: the child procedure has been killed
		**////////////////////////////////////////////////////////////////////
		void notifyChildKilled();

		//////////////////////////////////////////////////////////////////////
		/** Open a child procedure.
		 *
		 * \param procId IN: identifier of the child procedure.
		 * \param args IN: child procedure arguments
		 * \param automatic IN: if true, run the child in automatic mode.
		 * \param blocking IN: if true, run the child in blocking mode.
		 * \param visible IN: if true, run the child in visible mode.
		**////////////////////////////////////////////////////////////////////
		void openChildProcedure( const std::string& procId,
                             const std::string& args,
                             const bool automatic,
                             const bool blocking,
                             const bool visible );

		//////////////////////////////////////////////////////////////////////
		/** Close the child procedure.
		**////////////////////////////////////////////////////////////////////
		void closeChildProcedure();

		//////////////////////////////////////////////////////////////////////
		/** Kill the child procedure.
		**////////////////////////////////////////////////////////////////////
		void killChildProcedure();

		//////////////////////////////////////////////////////////////////////
		/** Check if there is an active child procedure.
		**////////////////////////////////////////////////////////////////////
		const bool hasChild();

		//////////////////////////////////////////////////////////////////////
		/** Check if the child procedure is alive.
		**////////////////////////////////////////////////////////////////////
		const bool isAlive();

		//////////////////////////////////////////////////////////////////////
		/** Get the identifier of the child procedure
		**////////////////////////////////////////////////////////////////////
		const std::string& getChildId() const { return m_childProc; };

		//////////////////////////////////////////////////////////////////////
		/** Get the status of the child procedure.
		**////////////////////////////////////////////////////////////////////
		const SPELLexecutorStatus getChildStatus();

		//////////////////////////////////////////////////////////////////////
		/** Get the error information of the child procedure.
		**////////////////////////////////////////////////////////////////////
		const std::string& getChildError();

		//////////////////////////////////////////////////////////////////////
		/** Get the error information of the child procedure.
		**////////////////////////////////////////////////////////////////////
		const std::string& getChildErrorReason();

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the child procedure identifier */
		std::string      m_childProc;
		/** Holds the child status */
		SPELLexecutorStatus   m_childStatus;
		/** True if the child procedure is alive */
		bool             m_childAlive;
		/** Holds the error message if any */
		std::string      m_childError;
		/** Holds the error reason if any */
		std::string      m_childErrorReason;
		/** Synchrnonization lock */
		SPELLmutex       m_lock;
		/** Event for waiting for child procedure startup */
		SPELLevent       m_childStart;
};

/*@}*/
#endif
