// ################################################################################
// FILE       : SPELLexecutionModel.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Composite of all models and analyzers associated to a given frame.
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_EXEC_MODEL_H__
#define __SPELL_EXEC_MODEL_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLgoto.H"
#include "SPELL_EXC/SPELLbytecode.H"
#include "SPELL_EXC/SPELLlnotab.H"
#include "SPELL_EXC/SPELLastAnalyzer.H"
#include "SPELL_EXC/SPELLvariableMonitor.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_EXC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Execution model for procedures
 **
 ** \par Description and usage:
 **
 ** 	Used by the execution frame, contains a number of mechanisms and code
 ** 	analyzers necessary for the execution control and manipulation.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLexecutionModel : public SPELLgoto,
							public SPELLbytecode,
							public SPELLlnotab,
							public SPELLastAnalyzer,
							public SPELLvariableChangeListener
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLexecutionModel( const std::string& filename,
				             PyFrameObject* frame,
							 bool monitorVars,
							 std::set<std::string>& initialVariables);

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLexecutionModel();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Get the variables monitor.
		 *
		 * \return Reference to the variables monitor.
		**////////////////////////////////////////////////////////////////////
		SPELLvariableMonitor& getVariableMonitor() { return m_varMonitor; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLvariableChangeListener.
		**////////////////////////////////////////////////////////////////////
		void variableChanged( const std::vector<SPELLvarInfo>& changed );

		//////////////////////////////////////////////////////////////////////
		/** Update internal model.
		**////////////////////////////////////////////////////////////////////
		void update();

		//////////////////////////////////////////////////////////////////////
		/** Model is activated.
		**////////////////////////////////////////////////////////////////////
		void inScope();

		//////////////////////////////////////////////////////////////////////
		/** Get the associated frame
		**////////////////////////////////////////////////////////////////////
		PyFrameObject* getFrame() { return m_frame; };

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Reference to the associated frame */
		PyFrameObject* m_frame;
		/** Monitor of variables */
		SPELLvariableMonitor	m_varMonitor;
		/** If true, use the variable monitor */
		bool m_monitorVars;
};

/*@}*/
#endif
