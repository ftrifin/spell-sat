// ################################################################################
// FILE       : SPELLautomaticCif.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Automatic (non-interactive) client interface implementation
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_AUTOCLIENTIF_H__
#define __SPELL_AUTOCLIENTIF_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_CIF/SPELLcif.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_CIFC Command-line client interfaces (SPELL_CIFC)
 *
 * This module defines two alternative interfaces for the SPELL Executor,
 * both based on command-line executions. The first interface, SPELLstandaloneCif
 * creates a N-Curses interface to control a single procedure execution.
 * The second, SPELLautomaticCif is mean to be used for automatic (non-interactive)
 * execution of procedures.
 *
 * */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Automatic client interface.
 **
 ** \par Description and usage:
 **
 ** 	This interface is used when procedures/scripts are
 **  	executed in batch mode. No user interaction is foreseen. Prompt
 **  	answers are given in a text file.
 **
 ** 	It is instantiated in the SPELL Executor Command process when the
 **  	selected operation mode is non-interactive.
 **
 **     No concurrency issues foreseen.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLautomaticCif: public SPELLcif
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLautomaticCif();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLautomaticCif();

	// STATIC ////////////////////////////////////////////////////////////////
	// METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Setup the interface
		 *
		 * \param procId IN: identifier of the procedure being run
		 * \param ctxName IN: name of the context where the procedure is
		 * executed. Ignored when executing scripts.
		 * \param ctxPort IN: ignored.
		 * \param timeId IN: timestamp identifier for generated files like
		 * logs and AsRUN files.
		**////////////////////////////////////////////////////////////////////
		void setup( const std::string& procId, const std::string& ctxName, int ctxPort, const std::string& timeId );

		//////////////////////////////////////////////////////////////////////
		/** Cleanup the interface
		 *
		 * \param force IN: ignored.
		**////////////////////////////////////////////////////////////////////
		void cleanup( bool force );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::canClose(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		void canClose() {
			;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::waitClose(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		void waitClose() {
			;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::resetClose(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		void resetClose() {
			;
		}

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::getArguments(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		std::string getArguments();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::getCondition(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		std::string getCondition();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::isAutomatic(). Always true in this interface.
		**////////////////////////////////////////////////////////////////////
		bool isAutomatic() {
			return true;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::isVisible(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		bool isVisible() {
			return false;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif::isBlocking(). Not used in this interface.
		**////////////////////////////////////////////////////////////////////
		bool isBlocking() {
			return true;
		};

    //====================================================================
    // Python bindings start (see SPELLcif class)
    //====================================================================

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyLine();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyCall();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyReturn();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyStatus( const SPELLstatusInfo& st );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyError( const std::string& error, const std::string& reason, bool fatal );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyUserActionSet( const std::string& label, const unsigned int severity ) {
			;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyUserActionUnset() {
			;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notifyUserActionEnable( bool enable ) {
			;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void notify( ItemNotification notification ) {
			;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void write( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void warning( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void error( const std::string& msg, unsigned int scope );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		void log( const std::string& msg );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcif class.
		**////////////////////////////////////////////////////////////////////
		std::string prompt( const std::string& message, PromptOptions options, unsigned int type, unsigned int scope );

    //====================================================================
    // Python bindings end
    //====================================================================
};

/*@}*/
#endif
