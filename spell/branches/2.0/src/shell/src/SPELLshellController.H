// ################################################################################
// FILE       : SPELLshellController.H
// DATE       : Mar 18, 2011
// PROJECT    : SPELL
// DESCRIPTION: Fake controller model for shell
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_SHELL_CONTROLLER_H__
#define __SPELL_SHELL_CONTROLLER_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLcontrollerIF.H"
// Project includes --------------------------------------------------------


/** \addtogroup SPELL */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Command control thread
 **
 ** \par Description:
 **
 ** \par Usage:
 **
 ** \par Synchronization:
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLshellController: public SPELLcontrollerIF
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param exec INOUT: Reference to the executor object
		**////////////////////////////////////////////////////////////////////
		SPELLshellController()
		: SPELLcontrollerIF()
		{
			m_fakeCondition = "";
		};

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLshellController() {;};

    // STATIC ////////////////////////////////////////////////////////////////

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void begin() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void stop() {;}

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void reset() {;}

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void command( const ExecutorCommand& cmd, const bool queueIt, const bool high_priority ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		const bool shouldReload() const { return false; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		const bool shouldRecover() { return false; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		const SPELLexecutorStatus getStatus() const { return STATUS_UNINIT; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		const SPELLexecutionMode getMode() const { return MODE_PLAY; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void setStatus( const SPELLexecutorStatus& st ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void setMode( const SPELLexecutionMode& mode ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void setCondition( const std::string& condition ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		const std::string& getCondition() const { return m_fakeCondition; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		const bool hasCondition() const { return false; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void setAutoRun() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void setExecutionDelay( const long delay ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void enableRunInto( const bool enable ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		const bool checkAborted() { return false; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void executionLock() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void executionUnlock() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		const bool event_line( const std::string& file, const int& line, const std::string& name, bool executable ) { return false;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void event_call( const std::string& file, const int& line, const std::string& name)  {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void event_return( const std::string& file, const int& line, const std::string& name)  {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void setStartTime() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void setEndTime() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void setFinished() {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void setError( const std::string& error, const std::string& reason, const bool fatal ) {;};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcontrollerIF.
		**////////////////////////////////////////////////////////////////////
		void waitCommand() {;};

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
		std::string m_fakeCondition;
};

#endif
