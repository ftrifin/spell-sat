// ################################################################################
// FILE       : SPELLvariableManager.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Manager of procedure runtime variables
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_VAR_MANAGER_H__
#define __SPELL_VAR_MANAGER_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLframeManager.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_EXC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Variable manager
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLvariableManager
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLvariableManager( SPELLframeManager& frameManager );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLvariableManager();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Enable or disable the manager.
		**////////////////////////////////////////////////////////////////////
		void setEnabled( bool enabled ) { m_enabled = enabled; };

		//////////////////////////////////////////////////////////////////////
		/** Check enabled
		**////////////////////////////////////////////////////////////////////
		bool isEnabled() { return m_enabled; };

		//////////////////////////////////////////////////////////////////////
		/** Get currently available variables.
		 *
		 * \return The list of variables.
		**////////////////////////////////////////////////////////////////////
		std::vector<SPELLvarInfo> getAllVariables();

		//////////////////////////////////////////////////////////////////////
		/** Get currently available global variables.
		 *
		 * \return The list of variables.
		**////////////////////////////////////////////////////////////////////
		std::vector<SPELLvarInfo> getGlobalVariables();

		//////////////////////////////////////////////////////////////////////
		/** Get currently available local variables.
		 *
		 * \return The list of variables.
		**////////////////////////////////////////////////////////////////////
		std::vector<SPELLvarInfo> getLocalVariables();

		//////////////////////////////////////////////////////////////////////
		/** Get currently registered variables.
		 *
		 * \return The list of variables.
		**////////////////////////////////////////////////////////////////////
		std::vector<SPELLvarInfo> getRegisteredVariables();

		//////////////////////////////////////////////////////////////////////
		/** Get currently registered global variables.
		 *
		 * \return The list of variables.
		**////////////////////////////////////////////////////////////////////
		std::vector<SPELLvarInfo> getRegisteredGlobalVariables();

		//////////////////////////////////////////////////////////////////////
		/** Get currently registered local variables.
		 *
		 * \return The list of variables.
		**////////////////////////////////////////////////////////////////////
		std::vector<SPELLvarInfo> getRegisteredLocalVariables();

		//////////////////////////////////////////////////////////////////////
		/** Register a variable in the current frame.
		 *
		 * \param var INOUT: the variable information
		 *
		 * \return True if success.
		**////////////////////////////////////////////////////////////////////
		bool registerVariable( SPELLvarInfo& var );

		//////////////////////////////////////////////////////////////////////
		/** Unregister a variable in the current frame.
		 *
		 * \param var IN: the variable to unregister.
		 *
		**////////////////////////////////////////////////////////////////////
		void unregisterVariable( SPELLvarInfo& var );

		//////////////////////////////////////////////////////////////////////
		/** Change a variable value.
		 *
		 * \param var IN: the variable data.
		 *
		**////////////////////////////////////////////////////////////////////
		void changeVariable( SPELLvarInfo& var );

		//////////////////////////////////////////////////////////////////////
		/** Unregister all variables in all frames.
		**////////////////////////////////////////////////////////////////////
		void unregisterAll();

		//////////////////////////////////////////////////////////////////////
		/** Get Python reference to a variable
		**////////////////////////////////////////////////////////////////////
		PyObject* getVariableRef( const std::string& name );

		//////////////////////////////////////////////////////////////////////
		/** Check if the internal executor status is valid to process
		 * variable manipulation.
		 *
		 * \returns True if the status is valid.
		**////////////////////////////////////////////////////////////////////
		bool isStatusValid();

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds reference to the frame manager */
		SPELLframeManager& m_frameManager;
		/** Enable flag */
		bool m_enabled;
};

/*@}*/
#endif
