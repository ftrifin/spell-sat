// ################################################################################
// FILE       : SPELLwsDynamicData.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Handler for dynamic execution data
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_WS_DYNAMIC_DATA_H__
#define __SPELL_WS_DYNAMIC_DATA_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_WS/SPELLwsStorage.H"
#include "SPELL_WS/SPELLwsStartupInfo.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_WS */
/*@{*/

// FORWARD REFERENCES //////////////////////////////////////////////////////
// ENUMS ///////////////////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Manages the dynamic data of a Python execution frame.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLwsDynamicData
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param info IN: startup information
		 * \param depth IN: recursion depth of the associated frame
		 * \param frame IN: associated frame.
		 *
		**////////////////////////////////////////////////////////////////////
		SPELLwsDynamicData( const SPELLwsStartupInfo& info, unsigned int depth, PyFrameObject* frame );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLwsDynamicData();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Set the working mode.
		 *
		 * \param mode IN: the working mode.
		**////////////////////////////////////////////////////////////////////
		void setStorageMode( const SPELLwsStorage::Mode& mode ) { m_storage->reset(mode); };

		//////////////////////////////////////////////////////////////////////
		/** Reset the dynamic data manager.
		**////////////////////////////////////////////////////////////////////
		void reset();

		//////////////////////////////////////////////////////////////////////
		/** Save the data.
		**////////////////////////////////////////////////////////////////////
		void save();

		//////////////////////////////////////////////////////////////////////
		/** Update the data.
		**////////////////////////////////////////////////////////////////////
		void update();

		//////////////////////////////////////////////////////////////////////
		/** Restore the data into the associated frame after an error recovery.
		**////////////////////////////////////////////////////////////////////
		void recover();

		//////////////////////////////////////////////////////////////////////
		/** Recover the data from persistent files and restore the data into
		 * the associated frame after a warm start.
		**////////////////////////////////////////////////////////////////////
		void restore();

		//////////////////////////////////////////////////////////////////////
		/** Cleanup all data stored in files
		**////////////////////////////////////////////////////////////////////
		void cleanup();

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////

		/** Represents a list of copied instruction blocks */
		typedef std::vector<PyTryBlock> TryBlocks;

		/** Represents a list of stack objects */
		typedef std::vector<PyObject*> ObjectList;

    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Update the copy of try blocks if needed.
		**////////////////////////////////////////////////////////////////////
		void updateTryBlocks();

		//////////////////////////////////////////////////////////////////////
		/** Re-create the list of try blocks after a recovery.
		**////////////////////////////////////////////////////////////////////
		void recoverTryBlocks();

		//////////////////////////////////////////////////////////////////////
		/** Save the list of try blocks to persistent file
		**////////////////////////////////////////////////////////////////////
		void storeTryBlocks();

		//////////////////////////////////////////////////////////////////////
		/** Re-create the list of try blocks from persistent file, after a warmstart.
		**////////////////////////////////////////////////////////////////////
		void loadTryBlocks();

		//////////////////////////////////////////////////////////////////////
		/** Update the copy of value stack if needed.
		**////////////////////////////////////////////////////////////////////
		void updateValueStack();

		//////////////////////////////////////////////////////////////////////
		/** Re-create the value stack after a recovery.
		**////////////////////////////////////////////////////////////////////
		void recoverValueStack();

		//////////////////////////////////////////////////////////////////////
		/** Save the list of value stack objects to persistent file
		**////////////////////////////////////////////////////////////////////
		void storeValueStack();

		//////////////////////////////////////////////////////////////////////
		/** Re-create the value stack from persistent file, after a warmstart.
		**////////////////////////////////////////////////////////////////////
		void loadValueStack();

		//////////////////////////////////////////////////////////////////////
		/** Update the copy of fast locals if needed.
		**////////////////////////////////////////////////////////////////////
		void updateFastLocals();

		//////////////////////////////////////////////////////////////////////
		/** Re-create the fast locals after a recovery.
		**////////////////////////////////////////////////////////////////////
		void recoverFastLocals();

		//////////////////////////////////////////////////////////////////////
		/** Save the fast locals to persistent file
		**////////////////////////////////////////////////////////////////////
		void storeFastLocals();

		//////////////////////////////////////////////////////////////////////
		/** Re-create the fast locals from persistent file, after a warmstart.
		**////////////////////////////////////////////////////////////////////
		void loadFastLocals();

		//////////////////////////////////////////////////////////////////////
		/** Save the globals to persistent file
		**////////////////////////////////////////////////////////////////////
		void storeGlobals();

		//////////////////////////////////////////////////////////////////////
		/** Re-create the globals from persistent file, after a warmstart.
		**////////////////////////////////////////////////////////////////////
		void loadGlobals();

		//////////////////////////////////////////////////////////////////////
		/** Save the locals to persistent file
		**////////////////////////////////////////////////////////////////////
		void storeLocals();

		//////////////////////////////////////////////////////////////////////
		/** Re-create the locals from persistent file, after a warmstart.
		**////////////////////////////////////////////////////////////////////
		void loadLocals();

		//////////////////////////////////////////////////////////////////////
		/** Save the loaded const references to persistent file
		**////////////////////////////////////////////////////////////////////
		void storeConstReferences( PyObject* dictionary );

		//////////////////////////////////////////////////////////////////////
		/** Load the loaded const references from persistent file
		**////////////////////////////////////////////////////////////////////
		void loadConstReferences( PyObject* dictionary );

		//////////////////////////////////////////////////////////////////////
		/** Save the frame parameters to persistent file
		**////////////////////////////////////////////////////////////////////
		void storeParameters();

		//////////////////////////////////////////////////////////////////////
		/** Re-create the frame parameters from persistent file, after a warmstart.
		**////////////////////////////////////////////////////////////////////
		void loadParameters();

		//////////////////////////////////////////////////////////////////////
		/** Save the given dictionary to persistent file
		**////////////////////////////////////////////////////////////////////
		void storeDictionary( PyObject* dictionary );

		//////////////////////////////////////////////////////////////////////
		/** Re-create a dictionary from persistent file, after a warmstart.
		**////////////////////////////////////////////////////////////////////
		PyObject* loadDictionary();

		//////////////////////////////////////////////////////////////////////
		/** Save DTA container
		**////////////////////////////////////////////////////////////////////
		void storeDTA( const std::string& container );

		//////////////////////////////////////////////////////////////////////
		/** Load DTA container
		**////////////////////////////////////////////////////////////////////
		void loadDTA( const std::string& container );

    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Warmstart startup information */
		SPELLwsStartupInfo m_startup;
		/** Borrowed reference of the frame */
		PyFrameObject* m_frame;
		/** Holds a copy of the frame try blocks, for error recovery */
		TryBlocks m_iBlocks;
		/** Holds a copy of the value stack objects, for error recovery */
		ObjectList m_valueStack;
		/** Holds a copy of the fast locals, for error recovery */
		ObjectList m_fastLocals;
		/** Holds the file name of the associated persistent file */
		std::string m_persistentFile;
		/** Holds the file name of the associated recovery file */
		std::string m_recoveryFile;
		/** Storage for the associated persistent file */
		SPELLwsStorage* m_storage;
		/** Holds the recursion depth for the associated frame */
		int m_depth;
};

/*@}*/
#endif
