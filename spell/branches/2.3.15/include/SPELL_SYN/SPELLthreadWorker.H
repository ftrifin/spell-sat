// ################################################################################
// FILE       : SPELLthreadWorker.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Thread worker for thread pools
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_THREAD_WORKER_H__
#define __SPELL_THREAD_WORKER_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_SYN/SPELLmutex.H"
#include "SPELL_SYN/SPELLthreadWork.H"
#include "SPELL_SYN/SPELLevent.H"
#include "SPELL_SYN/SPELLthread.H"
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"

/** \addtogroup SPELL_SYN */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Worker for thread pools
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLthreadWorker : public SPELLthread
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLthreadWorker( const std::string& id );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLthreadWorker();

		//////////////////////////////////////////////////////////////////////
		/** Thread method (never ends until system shutdown)
		**////////////////////////////////////////////////////////////////////
		void run();

		//////////////////////////////////////////////////////////////////////
		/** Shutdown the worker
		**////////////////////////////////////////////////////////////////////
		void shutdown();

		//////////////////////////////////////////////////////////////////////
		/** Assign work to do. Starts doing the work until finished, then
		 * marks itself as free
		**////////////////////////////////////////////////////////////////////
		void assignWork( SPELLthreadWork* work );

		//////////////////////////////////////////////////////////////////////
		/** Check if free to work
		**////////////////////////////////////////////////////////////////////
		bool isFree();

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Check if it should finish
		**////////////////////////////////////////////////////////////////////
		bool isShutdown();

		//////////////////////////////////////////////////////////////////////
		/** Get assigned work if any
		**////////////////////////////////////////////////////////////////////
		SPELLthreadWork* getWork();

		//////////////////////////////////////////////////////////////////////
		/** Delete assigned work if any
		**////////////////////////////////////////////////////////////////////
		void deleteWork();

    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Sync mutex */
		SPELLmutex m_lock;
		/** Work to be done */
		SPELLthreadWork* m_work;
		/** Event that triggers new work to be done */
		SPELLevent m_newWork;
		/** Finish flag */
		bool m_shutdown;
		/** Busy flag */
		bool m_busy;

};

/*@}*/
#endif
