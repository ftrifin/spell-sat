// ################################################################################
// FILE       : SPELLlibrary.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Library model
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_LIBRARY_H__
#define __SPELL_LIBRARY_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_PRD/SPELLprocedureSourceCode.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_PRD */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Model of a spell user library.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLlibrary
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		 *
		 * \param libPath IN: library path
		 * \param file IN: file name.
		**////////////////////////////////////////////////////////////////////
		SPELLlibrary( const std::string& libPath, const std::string& file );

		//////////////////////////////////////////////////////////////////////
		/** Destructor
		**////////////////////////////////////////////////////////////////////
		~SPELLlibrary();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the procedure file name and path.
		 *
		 * \returns The procedure file name and path.
		**////////////////////////////////////////////////////////////////////
		const std::string getLibId() const   {
			return m_libId;
		};

		//////////////////////////////////////////////////////////////////////
		/** Obtain the procedure file name and path.
		 *
		 * \returns The procedure file name and path.
		**////////////////////////////////////////////////////////////////////
		const std::string getFilename() const   {
			return m_source.getFilename();
		};

		//////////////////////////////////////////////////////////////////////
		/** Obtain the procedure source code.
		 *
		 * \returns The procedure source code.
		**////////////////////////////////////////////////////////////////////
		SPELLprocedureSourceCode getSourceCode() const {
			return m_source;
		};

		//////////////////////////////////////////////////////////////////////
		/** Refresh the procedure data.
		**////////////////////////////////////////////////////////////////////
		void refresh() {
			parseFile(m_source.getFilename());
		};

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Parse the procedure file and extract all properties found.
		 *
		 * \param path IN: the path to the procedure file.
		**////////////////////////////////////////////////////////////////////
		void parseFile( const std::string& path );

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the library id */
		std::string m_libId;
		/** Procedure source code */
		SPELLprocedureSourceCode m_source;
};

/*@}*/
#endif
