// ################################################################################
// FILE       : SPELLconfigDict.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: SPELL configuration dictionary wrapper
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_CFGDICT_H__
#define __SPELL_CFGDICT_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_WRP/SPELLpyValue.H"
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"

/** \addtogroup SPELL_WRP */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 *  \brief Wrapper for the SPELL config dictionary
 *
 *  \par Description and usage:
 *
 */
//////////////////////////////////////////////////////////////////////////////
class SPELLconfigDict
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLconfigDict( PyObject* );

		//////////////////////////////////////////////////////////////////////
		/** Copy constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLconfigDict( const SPELLconfigDict& other );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLconfigDict();

		//////////////////////////////////////////////////////////////////////
		/** Assignment operator
		**////////////////////////////////////////////////////////////////////
		SPELLconfigDict& operator=( const SPELLconfigDict& other );

		//////////////////////////////////////////////////////////////////////
		/** Reset values with given dictionary
		**////////////////////////////////////////////////////////////////////
		void reset( PyObject* );

		//////////////////////////////////////////////////////////////////////
		/** Obtain a config value
		 *
		 * \return
		**////////////////////////////////////////////////////////////////////
		SPELLpyValue get( const std::string& key ) const;

		//////////////////////////////////////////////////////////////////////
		/** Check if a config value exists
		 *
		 * \return
		**////////////////////////////////////////////////////////////////////
		bool hasKey( const std::string& key ) const;

		//////////////////////////////////////////////////////////////////////
		/** Update with values from another dictionary
		 *
		 * \return
		**////////////////////////////////////////////////////////////////////
		void update( const SPELLconfigDict& other );

		//////////////////////////////////////////////////////////////////////
		/** Convert to Python dictionary
		 *
		 * \return
		**////////////////////////////////////////////////////////////////////
		PyObject* toPython() const;

    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		std::map<std::string,SPELLpyValue> m_values;
};

/*@}*/
#endif
