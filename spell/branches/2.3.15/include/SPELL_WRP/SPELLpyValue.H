// ################################################################################
// FILE       : SPELLpyValue.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Data value variant implementation
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_PY_VALUE_H__
#define __SPELL_PY_VALUE_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"
#include "SPELL_UTIL/SPELLtime.H"
// Local includes ----------------------------------------------------------
// System includes ---------------------------------------------------------

// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////
// GLOBALS /////////////////////////////////////////////////////////////////

/** \addtogroup SPELL_WRP */
/*@{*/

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Variable value implementation
 **
 *////////////////////////////////////////////////////////////////////////////
class SPELLpyValue
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////

	enum Type
	{
	LONG,
	DOUBLE,
	BOOLEAN,
	STRING,
	RELTIME,
	ABSTIME,
	LIST,
	DICT,
	NONE
	};

    // TYPES /////////////////////////////////////////////////////////////////

		typedef std::vector<SPELLpyValue> ValueList;
		typedef std::map<std::string,SPELLpyValue> ValueMap;

    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLpyValue( PyObject* pyValue );

		//////////////////////////////////////////////////////////////////////
		/** Destructor
		**////////////////////////////////////////////////////////////////////
		~SPELLpyValue();

	// OPERATORS /////////////////////////////////////////////////////////////

		SPELLpyValue& operator=( PyObject* pyValue );

		SPELLpyValue& operator=( const SPELLpyValue& other );

		bool operator==( const SPELLpyValue& other );
		bool operator<=( const SPELLpyValue& other );
		bool operator<( const SPELLpyValue& other );
		bool operator>=( const SPELLpyValue& other );
		bool operator>( const SPELLpyValue& other );
		bool operator!=( const SPELLpyValue& other );

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Set variable value
		**////////////////////////////////////////////////////////////////////
		void set( PyObject* value );

		//////////////////////////////////////////////////////////////////////
		/** Get variable value
		**////////////////////////////////////////////////////////////////////
		PyObject* get() const;

		//////////////////////////////////////////////////////////////////////
		/** Get type
		**////////////////////////////////////////////////////////////////////
		Type type() const;

		//////////////////////////////////////////////////////////////////////
		/** Get type string
		**////////////////////////////////////////////////////////////////////
		std::string typeStr() const;

		//////////////////////////////////////////////////////////////////////
		/** Get value string
		**////////////////////////////////////////////////////////////////////
		std::string str() const;

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		long intValue() const { return m_intValue; };

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		double floatValue() const { return m_floatValue; };

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		bool boolValue() const { return m_boolValue; };

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		std::string strValue() const { return m_stringValue; };

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		SPELLtime timeValue() const { return m_timeValue; };

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		ValueList listValue() const { return m_listValue; };

		//////////////////////////////////////////////////////////////////////
		/**
		**////////////////////////////////////////////////////////////////////
		ValueMap dictValue() const { return m_dictValue; };

		//////////////////////////////////////////////////////////////////////
		/** Check none
		**////////////////////////////////////////////////////////////////////
		bool isNone() const { return m_type == NONE; };

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

		long        m_intValue;
		double      m_floatValue;
		bool        m_boolValue;
		std::string m_stringValue;
		SPELLtime   m_timeValue;
		ValueList   m_listValue;
		ValueMap    m_dictValue;

		Type m_type;
};


/*@}*/
#endif
