// ################################################################################
// FILE       : SPELLdriverConfig.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Wrapper for driver configuration
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_DRIVER_CONFIGURATION_H__
#define __SPELL_DRIVER_CONFIGURATION_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_CFG/SPELLxmlConfigReader.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_CFG */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 * \brief Driver configuration object
 *
 * \par Description and usage:
 *
 * 		Provides the information of the XML driver configuration file.
 *
 */
//////////////////////////////////////////////////////////////////////////////
class SPELLdriverConfig
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		 *
		 * \param contextFile IN: path to driver configuration file.
		**////////////////////////////////////////////////////////////////////
		SPELLdriverConfig( const std::string& driverFile );

		//////////////////////////////////////////////////////////////////////
		/** Destructor
		**////////////////////////////////////////////////////////////////////
		~SPELLdriverConfig();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the driver identifier.
		 *
		 * \returns The driver identifier.
		**////////////////////////////////////////////////////////////////////
		std::string getIdentifier() const { return m_drvIdentifier; };

		//////////////////////////////////////////////////////////////////////
		/** Obtain the driver name.
		 *
		 * \returns The driver name.
		**////////////////////////////////////////////////////////////////////
		std::string getName() const { return m_drvName; };

		//////////////////////////////////////////////////////////////////////
		/** Obtain the driver interfaces.
		 *
		 * \returns The driver name.
		**////////////////////////////////////////////////////////////////////
		std::vector<std::string> getInterfaces() const { return m_interfaces; };

		//////////////////////////////////////////////////////////////////////
		/** Obtain the driver library paths.
		 *
		 * \returns The library paths.
		**////////////////////////////////////////////////////////////////////
		std::vector<std::string> getLibraries() const { return m_libraries; };

		//////////////////////////////////////////////////////////////////////
		/** Obtain the driver installation path.
		 *
		 * \returns The driver installation path.
		**////////////////////////////////////////////////////////////////////
		std::string getPath() const { return m_path; };

		//////////////////////////////////////////////////////////////////////
		/** Obtain the driver maximum number of procedures.
		 *
		 * \returns The driver maximum number of procedures.
		**////////////////////////////////////////////////////////////////////
		unsigned int getMaxProcs() const { return m_maxProcs; };

		//////////////////////////////////////////////////////////////////////
		/** Obtain a driver configuration parameter.
		 *
		 * \param key IN: the name of the configuration parameter.
		 *
		 * \returns The value of the configuration parameter.
		**////////////////////////////////////////////////////////////////////
		std::string getProperty( const std::string& key ) const;

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
		/** Internally used for storing property names and values */
		typedef std::map<std::string,std::string> Properties;
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Load all basic parameters
		 *
		 * \throws SPELLcoreException in case of load failure
		**////////////////////////////////////////////////////////////////////
		void loadBasics();

		//////////////////////////////////////////////////////////////////////
		/** Load driver properties
		**////////////////////////////////////////////////////////////////////
		void loadProperties();

    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the XML reader */
		SPELLxmlConfigReader* m_reader;
		/** Holds the driver identifier */
		std::string m_drvIdentifier;
		/** Holds the driver name */
		std::string m_drvName;
		/** Holds the installation path */
		std::string m_path;
		/** Holds the library paths */
		std::vector<std::string> m_libraries;
		/** Holds the driver interfaces */
		std::vector<std::string> m_interfaces;
		/** Holds the properties */
		Properties m_properties;
		/** Holds the maximum amount of procs allowed */
		unsigned int m_maxProcs;
};

/*@}*/
#endif
