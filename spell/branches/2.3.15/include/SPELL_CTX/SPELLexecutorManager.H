// ################################################################################
// FILE       : SPELLexecutorManager.H
// DATE       : Apr 11, 2011
// PROJECT    : SPELL
// DESCRIPTION: Manages the executor operations interacts with clients
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2012 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_EXECUTOR_MANAGER_H__
#define __SPELL_EXECUTOR_MANAGER_H__

// FILES TO INCLUDE //////////////////////////////////////////////////////////
// Local includes ------------------------------------------------------------
#include "SPELL_CTX/SPELLclient.H"
#include "SPELL_CTX/SPELLexecutorConfiguration.H"
#include "SPELL_CTX/SPELLexecutorIPC.H"
#include "SPELL_CTX/SPELLexecutor.H"
#include "SPELL_CTX/SPELLpersistencyTable.H"
// Project includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLcommand.H"
#include "SPELL_SYN/SPELLmutex.H"
#include "SPELL_IPC/SPELLipcMessage.H"

/** \addtogroup SPELL_CTX */
/*@{*/


// FORWARD REFERENCES ////////////////////////////////////////////////////////
// TYPES /////////////////////////////////////////////////////////////////////
// DEFINES ///////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief
 **
 ** \par Description:
 **
 ** \par Usage:
 **
 ** \par Synchronization:
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLexecutorManager
{
public: //--------------------------------------------------------------------

    // ENUMS /////////////////////////////////////////////////////////////////

		typedef enum ErrorCode_
		{
			UNKNOWN_PROC_ID,
			PROCEDURE_FAILED_STARTUP,
			PROCEDURE_CRASHED,
			UNKNOWN
		}
		ErrorCode;

	// EXCEPTIONS ////////////////////////////////////////////////////////////

		typedef struct OperationError_
		{
			std::string message;
			ErrorCode   errorCode;
		}
		OperationError;

    // TYPES /////////////////////////////////////////////////////////////////

		typedef std::list<std::string> ExecList;

    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLexecutorManager();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLexecutorManager();

    // STATIC ////////////////////////////////////////////////////////////////

		static SPELLexecutorManager& instance();

    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Start an executor and associate it to the given controlling
		 * client
		**////////////////////////////////////////////////////////////////////
		void startExecutor( SPELLexecutorConfiguration& config, SPELLclient* controllingClient );

		//////////////////////////////////////////////////////////////////////
		/** Recover an executor and associate it to the given controlling
		 * client
		**////////////////////////////////////////////////////////////////////
		void recoverExecutor( SPELLexecutorConfiguration& config, SPELLclient* controllingClient );

		//////////////////////////////////////////////////////////////////////
		/** Stop an executor
		**////////////////////////////////////////////////////////////////////
		void closeExecutor( const std::string& procId );

		//////////////////////////////////////////////////////////////////////
		/** Kill an executor
		**////////////////////////////////////////////////////////////////////
		void killExecutor( const std::string& procId );

		//////////////////////////////////////////////////////////////////////
		/** Kill all executors
		**////////////////////////////////////////////////////////////////////
		void killAll();

		//////////////////////////////////////////////////////////////////////
		/** Check for active executors
		**////////////////////////////////////////////////////////////////////
		unsigned int getNumActiveExecutors();

		//////////////////////////////////////////////////////////////////////
		/** Obtain an available instance identifier
		**////////////////////////////////////////////////////////////////////
		std::string getInstanceId( const std::string& procId );

		//////////////////////////////////////////////////////////////////////
		/** Initialize the manager
		**////////////////////////////////////////////////////////////////////
		void setup( const std::string& contextName );

		//////////////////////////////////////////////////////////////////////
		/** Cleanup the manager
		**////////////////////////////////////////////////////////////////////
		void cleanup();

		//////////////////////////////////////////////////////////////////////
		/** Obtain a given executor
		**////////////////////////////////////////////////////////////////////
		SPELLexecutor* getExecutor( const std::string& procId );

		//////////////////////////////////////////////////////////////////////
		/** Obtain list of existing executors
		**////////////////////////////////////////////////////////////////////
		ExecList getExecutorList();

		//////////////////////////////////////////////////////////////////////
		/** Report an executor lost
		**////////////////////////////////////////////////////////////////////
		void executorLost( SPELLexecutor& executor );

		//////////////////////////////////////////////////////////////////////
		/** Mark executor to be cleared
		**////////////////////////////////////////////////////////////////////
		void clearExecutor( const std::string& instanceId );

		//////////////////////////////////////////////////////////////////////
		/** Complete the message with executor information
		**////////////////////////////////////////////////////////////////////
		void buildExecutorInfo( const std::string& procId, SPELLipcMessage& msg );

		//////////////////////////////////////////////////////////////////////
		/** Delete files corresponding to the given executor
		**////////////////////////////////////////////////////////////////////
		void deleteExecutorFiles( const SPELLexecutorConfiguration& config );

	// DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

		friend class LoginMonitor;

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		void callback_executorReconnected( const std::string& instanceId );
		void callback_executorNotReconnected( const std::string& instanceId );

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////

		typedef std::map<std::string,SPELLexecutor*> ExecutorMap;
		typedef std::list<int> InstanceList;
		typedef std::map<std::string,InstanceList> InstanceMap;
		typedef std::list<std::string> IdentifierList;

    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Prepare to executor reconnection in case of starting after crash
		**////////////////////////////////////////////////////////////////////
		void reconnectExecutors();

		void addExecutorModel( SPELLexecutor* exec );

		void removeExecutorModel( const std::string& instanceId );

		bool hasInstanceNumber( const std::string& procId, int instanceNum );

		void addInstanceNumber( const std::string& procId, int instanceNum );

		void removeInstanceNumber( const std::string& procId, int instanceNum );

		void clearModels();

    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Synchronization lock */
		SPELLmutex	m_lock;
		/** Holds the singleton instance */
		static SPELLexecutorManager* s_instance;
		/** Holds the map of existing executors */
		ExecutorMap m_executors;
		/** Holds the map of existing instance numbers */
		InstanceMap m_instances;
		/** Holds the context name */
		std::string m_contextName;
		/** Holds the list of executors to be cleared next time */
		IdentifierList m_toClear;
		/** Holds the persistency table for executors */
		SPELLpersistencyTable* m_persisTable;
		/** Orphan executors pending login */
		ExecutorMap m_pendingLogin;

};

/*@}*/
#endif
