// ################################################################################
// FILE       : SPELLipcClientInterface.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: IPC - Interface for clients
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_IPC_CINTERFACE_H__
#define __SPELL_IPC_CINTERFACE_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_IPC/SPELLipcOutput.H"
#include "SPELL_IPC/SPELLipcInput.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_IPC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief IPC client interface
 **
 ** \par Description and usage:
 **
 ** 	IPC interface used to communicate with a server.
 **
 ** 	Once the instance is created, it has to be initialized with
 ** 	the IPC listener (to receive incoming messages). Then, the interface
 ** 	can be connected to the peer. sendXXX methods can be used to send messages
 ** 	and requests.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcClientInterface : public SPELLipcInterface
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param name IN: name of the interface.
		 * \param host IN: host where the server is located
		 * \param port IN: port of the server.
		**////////////////////////////////////////////////////////////////////
		SPELLipcClientInterface( std::string name, std::string host, int port );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLipcClientInterface();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void connectIfc();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void disconnect( bool send_eoc );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void disconnect( int peerKey, bool send_eoc );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface. Ignored for client interfaces.
		**////////////////////////////////////////////////////////////////////
		void run() {
			;
		};

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void connectionClosed( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		void connectionLost( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		int getKey() {
			return m_clientKey;
		};

		//////////////////////////////////////////////////////////////////////
		/** Send a message to the server.
		 *
		 * \param msg IN: message to be sent.
		**////////////////////////////////////////////////////////////////////
		void sendMessage( SPELLipcMessage* msg );

		//////////////////////////////////////////////////////////////////////
		/** Send a request to the server.
		 *
		 * \param msg IN: request to be sent.
		 * \param timeoutSec IN: timeout in seconds for the response
		 *
		 * \returns The request response.
		**////////////////////////////////////////////////////////////////////
		SPELLipcMessage* sendRequest( SPELLipcMessage* msg, unsigned long timeoutSec );

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Read the key assigned by the server
		**////////////////////////////////////////////////////////////////////
		void readMyKey();

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		SPELLipcOutput& getWriter( int peerKey );

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLipcInterface.
		**////////////////////////////////////////////////////////////////////
		SPELLipcInput& getReader( int peerKey );

    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the key associated with this interface */
		int m_clientKey;
		/** Holds the hostname of the server */
		std::string m_serverHost;
		/** Holds the server port */
		int m_serverPort;
		/** Holds the socket file descriptor */
		SPELLsocket* m_socket;
		/** Output device for the server */
		SPELLipcOutput* m_writer;
		/** Input devide for the server */
		SPELLipcInput* m_reader;
};

/*@}*/
#endif
