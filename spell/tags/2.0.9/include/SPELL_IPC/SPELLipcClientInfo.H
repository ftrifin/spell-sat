// ################################################################################
// FILE       : SPELLipcClientInfo.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Inter-process communication - Client information
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_IPC_CLIENTINFO_H__
#define __SPELL_IPC_CLIENTINFO_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_IPC/SPELLipcOutput.H"
#include "SPELL_IPC/SPELLipcInput.H"
// Project includes --------------------------------------------------------


/** \addtogroup SPELL_IPC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
class SPELLipcInterface;
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Holds the information about an IPC client
 **
 ** \par Description and usage:
 **
 **  	USed by IPC SPELLipcServerInterface to hold the elements to interact
 **  	with a SPELLipcClientInterface which is on the other side of the
 **  	channel.
 **
 **  \see SPELLsocket, SPELLipcInput, SPELLipcOutput
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLipcClientInfo
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param name IN: name of the interface.
		 * \param socket IN: socket associated with the client
		 * \param key IN: assigned IPC key.
		 * \param ifc INOUT: parent server interface.
		**////////////////////////////////////////////////////////////////////
		SPELLipcClientInfo( const std::string& name, SPELLsocket* socket, int key, SPELLipcInterface* ifc );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLipcClientInfo();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the writer for this client.
		 *
		 * \return The output device for the client.
		**////////////////////////////////////////////////////////////////////
		SPELLipcOutput& getWriter() {
			return m_output;
		};

		//////////////////////////////////////////////////////////////////////
		/** Obtain the reader for this client.
		 *
		 * \return The input device for the client.
		**////////////////////////////////////////////////////////////////////
		SPELLipcInput& getReader() {
			return m_input;
		};

		//////////////////////////////////////////////////////////////////////
		/** Disconnect the client.
		 *
		 * \param send_eoc IN: if true, send an EOC message to the client before
		 * closing the channel.
		**////////////////////////////////////////////////////////////////////
		void disconnectClient( bool send_eoc );

    //////////////////////////////////////////////////////////////////////

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Holds the client socket */
		SPELLsocket* m_socket;
		/** Holds the input device */
		SPELLipcInput m_input;
		/** Holds the output device */
		SPELLipcOutput m_output;
};

/*@}*/
#endif
