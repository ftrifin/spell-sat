// ################################################################################
// FILE       : SPELLcodeTreeLine.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Code tree line model implementation
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_CODE_TREE_LINE_H__
#define __SPELL_CODE_TREE_LINE_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_EXC/SPELLcodeTreeLineIF.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_EXC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Executed line data model.
 **
 ** \par Description and usage:
 **
 ** 	Holds information about executed procedure lines.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLcodeTreeLine : public SPELLcodeTreeLineIF
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		**////////////////////////////////////////////////////////////////////
		SPELLcodeTreeLine( unsigned int lineNo, SPELLcodeTreeNodeIF* parent );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLcodeTreeLine();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeLineIF.
		**////////////////////////////////////////////////////////////////////
		unsigned int getLineNo() const { return m_lineNo; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeLineIF.
		**////////////////////////////////////////////////////////////////////
		void addChildCode( SPELLcodeTreeNodeIF* child ) { m_childCode = child; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeLineIF.
		**////////////////////////////////////////////////////////////////////
		SPELLcodeTreeNodeIF* getParentCode() const { return m_parentCode; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeLineIF.
		**////////////////////////////////////////////////////////////////////
		SPELLcodeTreeNodeIF* getChildCode() const { return m_childCode; };

		//////////////////////////////////////////////////////////////////////
		/** \see SPELLcodeTreeLineIF.
		**////////////////////////////////////////////////////////////////////
		void reset();

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

		/** Holds the line number */
		unsigned int m_lineNo;
		/** Holds the parent code */
		SPELLcodeTreeNodeIF* m_parentCode;
		/** Holds the child code, if any */
		SPELLcodeTreeNodeIF* m_childCode;
};

/*@}*/
#endif
