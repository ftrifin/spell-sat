// ################################################################################
// FILE       : SPELLlnotab.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: LNotab analyzer.
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_LNOTAB_H__
#define __SPELL_LNOTAB_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"

/** \addtogroup SPELL_EXC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief LNotab analyzer
 **
 ** \par Description and usage:
 **
 ** 	This class is in charge of analyizing the LNOTAB
 **  	structure, used internally by the Python framework to keep track of
 **  	the relationship between the source code line numbers and the bytecode
 **  	instructions. The LNotab analysis is used to find target lines when
 **  	doing skip.
 **
 ** 	It is instantiated once per file by the execution frame.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLlnotab
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param code IN: Python bytecode that contains the LNOTAB to analyze
		**////////////////////////////////////////////////////////////////////
		SPELLlnotab( PyCodeObject* code );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLlnotab();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Get the source code line before the given one, if any.
		 *
		 * \param line IN: the line after the one searched.
		 *
		 * \returns The previous line or -1.
		**////////////////////////////////////////////////////////////////////
		const int lineBefore( const int& line );

		//////////////////////////////////////////////////////////////////////
		/** Get the source code line before the given one, if any.
		 *
		 * \param line IN: the line before the one searched.
		 *
		 * \returns The previous line or -1.
		**////////////////////////////////////////////////////////////////////
		const int lineAfter( const int& line );

		//////////////////////////////////////////////////////////////////////
		/** Get the bytecode offset corresponding to the given source code
		 * line number.
		 *
		 * \returns The bytecode offset, or -1.
		**////////////////////////////////////////////////////////////////////
		const int offset( const int& line );

		//////////////////////////////////////////////////////////////////////
		/** Get list of source code line numbers.
		 *
		 * \returns The list of line numbers.
		**////////////////////////////////////////////////////////////////////
		const std::list<int> getLines() const {
			return m_lines;
		};

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Analyze the given bytecode and extract LNOTAB information.
		 *
		 * \param code IN: the code to be analyzed.
		**////////////////////////////////////////////////////////////////////
		void analyze( PyCodeObject* code );

    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Executable line numbers */
		std::list<int>          m_lines;
		/** List of corresponding bytecode addresses */
		std::list<int>          m_addrs;
};

/*@}*/
#endif
