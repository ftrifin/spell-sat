// ################################################################################
// FILE       : SPELLevent.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Event mechanism
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_EVENT_H__
#define __SPELL_EVENT_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
// Local includes ----------------------------------------------------------
#include "SPELL_SYN/SPELLmutex.H"
#include "SPELL_SYN/SPELLcondition.H"
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_SYN */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Encapsulates an event mechanism
 **
 ** \par Description: the Event class encapsulates a Condition in such a way
 ** that thread synchronization can be cleanly done without having to provide
 ** a mutex object. The only requirement for two synchronized threads is to
 ** share the event object. The Event class implementation is platform
 ** independent.
 **
 ** \par Usage: the wait() method is blocking the caller, provided that the
 ** event has been cleared first by using clear(). Otherwise, the wait()
 ** method has no effect. Once a thread is blocked on wait(), it can be
 ** released again by calling set() from another thread.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLevent
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /** Constructor.
    **////////////////////////////////////////////////////////////////////
    SPELLevent();

    //////////////////////////////////////////////////////////////////////
    /** Destructor.
    **////////////////////////////////////////////////////////////////////
    ~SPELLevent();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /** Trigger the event. Further wait() calls will have no effect
    **////////////////////////////////////////////////////////////////////
    void set();

    //////////////////////////////////////////////////////////////////////
    /** Wait for the event. Will block if the event is cleared
    **////////////////////////////////////////////////////////////////////
    void wait();

    //////////////////////////////////////////////////////////////////////
    /** Wait for the event. Will block if the event is cleared
     * up to the given time
     *
     * \param timeout IN: timeout in seconds
    **////////////////////////////////////////////////////////////////////
    bool wait( unsigned long timeout );

    //////////////////////////////////////////////////////////////////////
    /** Clear the event. Further wait() calls will block the caller
    **////////////////////////////////////////////////////////////////////
    void clear();

    //////////////////////////////////////////////////////////////////////
    /** Check if the event is cleared or not
     *
     * \returns True if the event is cleared
    **////////////////////////////////////////////////////////////////////
    bool isClear();

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////
    // Holds the mechanism condition
    SPELLcondition m_condition;
    // Mutex for the condition object
    SPELLmutex     m_mutex;
    // True if the event is cleared, which means that wait() will block
    // the caller
    bool        m_isClear;
};


/*@}*/
#endif
