// ################################################################################
// FILE       : SPELLncursesShell.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Command line shell for standalone execution (NCurses)
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_NC_SHELL_H__
#define __SPELL_NC_SHELL_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
#include <iostream>
#include <vector>
#include <menu.h>
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------
#include "SPELL_SYN/SPELLthread.H"
#include "SPELL_SYN/SPELLevent.H"

/** \addtogroup SPELL_CIFC */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief NCurses command line interface
 **
 ** \par Description and usage:
 **
 ** 	This NCurses shell is used on the SPELL Executor command-line
 **  	process when running in interactive mode. It provides a very simplified
 **  	UI for execution control.
 **
 ** 	Instantiated by the SPELLstandaloneCif class.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLncursesShell: public SPELLthread
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor
		**////////////////////////////////////////////////////////////////////
		SPELLncursesShell();

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		virtual ~SPELLncursesShell();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Shell main loop
		**////////////////////////////////////////////////////////////////////
		void run();

		//////////////////////////////////////////////////////////////////////
		/** Cleanup resources
		**////////////////////////////////////////////////////////////////////
		void cleanup();

		//////////////////////////////////////////////////////////////////////
		/** Wait close command. Blocks the caller until the shell is ready
		 * to close.
		 *
		 * \returns True when the shell has been disposed.
		**////////////////////////////////////////////////////////////////////
		bool waitClose();

		//////////////////////////////////////////////////////////////////////
		/** Show the procedure callstack status
		 *
		 * \param msg IN: the stack information
		**////////////////////////////////////////////////////////////////////
		void show_stack( std::string msg );

		//////////////////////////////////////////////////////////////////////
		/** Show the procedure execution status
		 *
		 * \param status IN: status string
		**////////////////////////////////////////////////////////////////////
		void show_status( std::string status );

		//////////////////////////////////////////////////////////////////////
		/** Show an information message
		 *
		 * \param message IN: the message text
		**////////////////////////////////////////////////////////////////////
		void show_info( std::string message );

		//////////////////////////////////////////////////////////////////////
		/** Show an error message
		 *
		 * \param message IN: the message text
		**////////////////////////////////////////////////////////////////////
		void show_error( std::string message );

		//////////////////////////////////////////////////////////////////////
		/** Show a warning message
		 *
		 * \param message IN: the message text
		**////////////////////////////////////////////////////////////////////
		void show_warning( std::string message );

		//////////////////////////////////////////////////////////////////////
		/** Show a log message
		 *
		 * \param message IN: the message text
		**////////////////////////////////////////////////////////////////////
		void log( std::string message );

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Checks if the given user input corresponds to the closure request.
		 *
		 * \param c IN: the input character
		 * \returns True if the user requested the shell to be closed.
		**////////////////////////////////////////////////////////////////////
		bool shouldFinish( int c );

		//////////////////////////////////////////////////////////////////////
		/** Setup and configure NCurses.
		**////////////////////////////////////////////////////////////////////
		void setupCurses();

		//////////////////////////////////////////////////////////////////////
		/** Setup the UI menus
		**////////////////////////////////////////////////////////////////////
		void setupMenu();

		//////////////////////////////////////////////////////////////////////
		/** Cleanup NCurses resources
		**////////////////////////////////////////////////////////////////////
		void cleanupCurses();

		//////////////////////////////////////////////////////////////////////
		/** Cleanup UI menu resources
		**////////////////////////////////////////////////////////////////////
		void cleanupMenu();

		//////////////////////////////////////////////////////////////////////
		/** Update the message area
		**////////////////////////////////////////////////////////////////////
		void updateMessages();

		//////////////////////////////////////////////////////////////////////
		/** Update the log area
		**////////////////////////////////////////////////////////////////////
		void updateLog();

		//////////////////////////////////////////////////////////////////////
		/** Receive and process a command
		 *
		 * \param cmdId IN: command identifier to be processed
		**////////////////////////////////////////////////////////////////////
		void command( std::string cmdId );

    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** True if the shell is ready to work */
		bool m_ready;
		/** Holds the UI menu items */
		ITEM** m_menuItems;
		/** Main handler of the UI menu */
		MENU* m_menu;
		/** Handler for the NCurses menu window */
		WINDOW* m_menuWin;
		/** Holds the list of messages being shown */
		std::vector<std::string> m_messages;
		/** Holds the list of logs being shown */
		std::vector<std::string> m_logs;
		/** Holds the type of each message being shown */
		std::vector<int> m_mtypes;
		/** Close event to wait for NCurses correct cleanup */
		SPELLevent m_closeEvent;
};

/*@}*/
#endif
