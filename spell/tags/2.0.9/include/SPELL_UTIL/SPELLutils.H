// ################################################################################
// FILE       : SPELLutils.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: General utilities
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_UTILS_H__
#define __SPELL_UTILS_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// System includes ---------------------------------------------------------
#include "SPELL_UTIL/SPELLbase.H"
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------

/** \addtogroup SPELL_UTIL */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief System path separator.
 ** \todo Need to find a portable way for this. Autotools?
 **
**////////////////////////////////////////////////////////////////////////////
#define PATH_SEPARATOR "/"

//============================================================================
// Convenience string conversion macros
//============================================================================

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Create a standard string out of the given char*
 **
**////////////////////////////////////////////////////////////////////////////
#define STR(x)       ( (x==NULL) ? "" : std::string(x))

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convert a python string to standard string
 **
**////////////////////////////////////////////////////////////////////////////
#define PYSTR(x)     STR( PyString_AsString( x ) )

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain a standard string with the Representation of the given object
 **
**////////////////////////////////////////////////////////////////////////////
#define PYREPR(x)     STR( PyString_AsString( PyObject_Repr(x) ) )

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain a standard string with the Representation of the given object, with cast
 **
**////////////////////////////////////////////////////////////////////////////
#define PYCREPR(x)     PYREPR( (PyObject*) x )

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain a standard string from an integer/long
 **
**////////////////////////////////////////////////////////////////////////////
#define ISTR(x)     itostr(x)

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain a standard string from any python object
 **
**////////////////////////////////////////////////////////////////////////////
#define PYSSTR(x)     PYSTR( PyObject_Str(x) )

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain a standard string from a boolean test
 **
**////////////////////////////////////////////////////////////////////////////
#define BSTR(x)     ( x ? STR("true") : STR("false") )

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain a standard string for a pointer
 **
**////////////////////////////////////////////////////////////////////////////
#define PSTR(x)     ptostr(x)

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Create a python string object from a char string
 **
**////////////////////////////////////////////////////////////////////////////
#define STRPY(x)    PyString_FromString(x)

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Create a python string object from a standard string
 **
**////////////////////////////////////////////////////////////////////////////
#define SSTRPY(x)    PyString_FromString(x.c_str())

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain an object attribute
 **
**////////////////////////////////////////////////////////////////////////////
#define ATTR(x,y)   PyObject_GetAttr(x,STRPY(y))



//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to convert pointers to string repr
 **
 ** \param p IN: pointer to represent
 **
 ** \return The string representation of the pointer
 **
**////////////////////////////////////////////////////////////////////////////
inline std::string ptostr( void* p )
{
	if (p == NULL) return "<NULL>";
    std::stringstream buf;
    buf << p;
    return buf.str();
};

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to convert integers to string repr
 **
 ** \param i IN: integer to represent
 **
 ** \return The string representation of the number
 **
**////////////////////////////////////////////////////////////////////////////
std::string itostr( long i );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to tokenize strings
 **
 ** \param str IN: string to tokenize
 ** \param delimiters IN: list of characters used as delimiters, e.g "\n\r"
 **
 ** \return Vector containing the tokens.
 **
**////////////////////////////////////////////////////////////////////////////
std::vector<std::string> tokenize( const std::string& str, const std::string& delimiters );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to tokenize strings, counting the tokens as
 **  additional elements.
 **
 ** \param str IN: string to tokenize
 ** \param delimiters IN: list of characters used as delimiters, e.g "\n\r"
 **
 ** \return Vector containing the tokens including tokens between delimiters.
 **
**////////////////////////////////////////////////////////////////////////////
std::vector<std::string> tokenized( const std::string& str, const std::string& delimiters );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to remove trailing/leading spaces
 **
 ** \param str INOUT: string to trim
 **
**////////////////////////////////////////////////////////////////////////////
void trim( std::string& str );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to remove selected characters
 **
 ** \param str INOUT: string to trim
 ** \param characters IN: list of characters to remove
 **
**////////////////////////////////////////////////////////////////////////////
void trim( std::string& str, std::string characters );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to replace selected characters
 **
 ** \param str INOUT: string to manipulate
 ** \param original IN: character o string to replace
 ** \param newstr IN: character o string to be put in place
 **
**////////////////////////////////////////////////////////////////////////////
void replace( std::string& str, std::string original, std::string newstr );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to resolve paths with environment variables.
 **
 ** The environment variables are identified with a '$' sign. Example:
 **
 ** \code
 **    /path/to/$VAR/resolve
 ** \endcode
 **
 ** \param path IN: path to check
 **
 ** \throws SPELLcoreException if the path contains environment variables that
 ** do not exist.
 **
 ** \returns The path with the environment variables translated to their corresponding
 ** values.
 **
**////////////////////////////////////////////////////////////////////////////
std::string resolvePath( const std::string& path );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to find the base bath in the given path
 **
 ** \param path IN: the path to process
 **
 ** \return The base path.
 **
**////////////////////////////////////////////////////////////////////////////
std::string basePath( const std::string& path );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to check if a file/directory exists
 **
 ** \param path IN: path to check
 **
 ** \return True if the path exists
**////////////////////////////////////////////////////////////////////////////
bool pathExists( const std::string& path );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to check if a given path is a directory
 **
 ** \param path IN: path to check
 **
 ** \return True if the path is a directory
 **
**////////////////////////////////////////////////////////////////////////////
bool isDirectory( const std::string& path );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to get the subdirectories of a directory
 **
 ** \param path IN: path to process
 **
 ** \return The list of subdirectories
 **
**////////////////////////////////////////////////////////////////////////////
std::list<std::string> getSubdirs( const std::string& path );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function to get the files of a directory
 **
 ** \param path IN: path to process
 **
 ** \return The list of files
 **
**////////////////////////////////////////////////////////////////////////////
std::list<std::string> getFilesInDir( const std::string& path );

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Get a current time "timestamp string"
 **
 ** \return The current time as a formatted string
 **
**////////////////////////////////////////////////////////////////////////////
std::string timestamp();

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Get a current time "timestamp string" adapted for file names.
 **
 ** \return The current time as a formatted string
 **
**////////////////////////////////////////////////////////////////////////////
std::string fileTimestamp();

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Convenience function for debugging (shows SPELL variables)
 **
**////////////////////////////////////////////////////////////////////////////
void showEnvironment();

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain the SPELL home environment variable
 **
**////////////////////////////////////////////////////////////////////////////
std::string getSPELL_HOME();

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain the SPELL config environment variable
 **
**////////////////////////////////////////////////////////////////////////////
std::string getSPELL_CONFIG();

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Obtain the SPELL data environment variable
 **
**////////////////////////////////////////////////////////////////////////////
std::string getSPELL_DATA();

/*@}*/
#endif
