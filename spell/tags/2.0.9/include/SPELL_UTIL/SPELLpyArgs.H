// ################################################################################
// FILE       : SPELLpyArgs.H
// DATE       : Mar 17, 2011
// PROJECT    : SPELL
// DESCRIPTION: Utility for Python arguments processing
// --------------------------------------------------------------------------------
//
//  Copyright (C) 2008, 2011 SES ENGINEERING, Luxembourg S.A.R.L.
//
//  This file is part of SPELL.
//
// SPELL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SPELL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SPELL. If not, see <http://www.gnu.org/licenses/>.
//
// ################################################################################

#ifndef __SPELL_PYARGS_H__
#define __SPELL_PYARGS_H__

// FILES TO INCLUDE ////////////////////////////////////////////////////////
// Local includes ----------------------------------------------------------
// Project includes --------------------------------------------------------
#include "SPELL_UTIL/SPELLtime.H"
// System includes ---------------------------------------------------------

/** \addtogroup SPELL_UTIL */
/*@{*/


// FORWARD REFERENCES //////////////////////////////////////////////////////
// TYPES ///////////////////////////////////////////////////////////////////
// DEFINES /////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/**
 ** \brief Helper for argument manipulation.
 **
 ** \par Description and usage:
 **
 **		This class helps parsing the arguments given to Python binding functions
 **		in order to obtain values that can be manipulated on the C++ layer.
 **
**////////////////////////////////////////////////////////////////////////////
class SPELLpyArgs
{
public: //--------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param args IN: Python tuple with fixed arguments
		**////////////////////////////////////////////////////////////////////
		SPELLpyArgs( PyObject* args );

		//////////////////////////////////////////////////////////////////////
		/** Constructor.
		 *
		 * \param args IN: Python tuple with fixed arguments
		 * \param config IN: Python dictionary with configuration modifiers
		**////////////////////////////////////////////////////////////////////
		SPELLpyArgs( PyObject* args, PyObject* config );

		//////////////////////////////////////////////////////////////////////
		/** Destructor.
		**////////////////////////////////////////////////////////////////////
		~SPELLpyArgs();

    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the number of arguments.
		 *
		 * \return The number of arguments in the tuple.
		**////////////////////////////////////////////////////////////////////
		unsigned int size() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the positional argument in the nth position.
		 *
		 * \param index IN: index of the argument to retrieve.
		 *
		 * \return The corresponding argument.
		**////////////////////////////////////////////////////////////////////
		PyObject* operator[]( const int index ) const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the keyword argument corresponding to the given key.
		 *
		 * \param modifier IN: Keyword name.
		 *
		 * \return The number of arguments in the tuple.
		**////////////////////////////////////////////////////////////////////
		PyObject* operator[]( const std::string& modifier ) const;

		//////////////////////////////////////////////////////////////////////
		/** Check if the given SPELL modifier exists in the argument list.
		 *
		 * \param modifier IN: modifier name.
		 *
		 * \return True if the modifier is in the list.
		**////////////////////////////////////////////////////////////////////
		bool hasModifier( const std::string& modifier ) const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Wait modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		bool getModifier_Wait() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the PromptUser modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		bool getModifier_PromptUser() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the LoadOnly modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		bool getModifier_LoadOnly() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Block modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		bool getModifier_Block() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Sequence modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		bool getModifier_Sequence() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Time modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		SPELLtime   getModifier_Time() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the ReleaseTime modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		SPELLtime   getModifier_ReleaseTime() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Timeout modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		SPELLtime   getModifier_Timeout() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Until modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		SPELLtime   getModifier_Until() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Delay modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		SPELLtime   getModifier_Delay() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the ValueFormat modifier.
		 *
		 * \throws SPELLcoreException if the modifier does not contain one of
		 * the expected constants (RAW,ENG)
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		std::string getModifier_ValueFormat() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Expected modifier.
		 *
		 * \throws SPELLcoreException if the modifier does not contain a string.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		std::string getModifier_Expected() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the LoRed modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		std::string getModifier_LoRed() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the LoYel modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		std::string getModifier_LoYel() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the HiRed modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		std::string getModifier_HiRed() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the HiYel modifier.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		std::string getModifier_HiYel() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Message modifier.
		 *
		 * \throws SPELLcoreException if the modifier does not contain a string.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		std::string getModifier_Message() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Procedure modifier.
		 *
		 * \throws SPELLcoreException if the modifier does not contain a string.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		std::string getModifier_Procedure() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Severity modifier.
		 *
		 * \throws SPELLcoreException if the modifier does not contain a valid value
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		int getModifier_Severity() const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the Scope modifier.
		 *
		 * \throws SPELLcoreException if the modifier does not contain a valid value
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		int getModifier_Scope() const;

    // DATA MEMBERS //////////////////////////////////////////////////////////

protected: //-----------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////
    // DATA MEMBERS //////////////////////////////////////////////////////////

private: //-------------------------------------------------------------------

    // EXCEPTIONS ////////////////////////////////////////////////////////////
    // ENUMS /////////////////////////////////////////////////////////////////
    // TYPES /////////////////////////////////////////////////////////////////
    // LIFECYCLE /////////////////////////////////////////////////////////////
    // STATIC ////////////////////////////////////////////////////////////////
    // METHODS ///////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of a time modifier and convert its value to a
		 * \c SPELLtime instance.
		 *
		 * \return The modifier value as a \c SPELLtime instance.
		**////////////////////////////////////////////////////////////////////
		SPELLtime getModifier_AsTime( const std::string& modifier ) const;

		//////////////////////////////////////////////////////////////////////
		/** Obtain the value of the given modifier as a boolean value.
		 *
		 * \throws SPELLcoreException if the modifier does not contain a boolean
		 * Python value.
		 *
		 * \return The modifier value.
		**////////////////////////////////////////////////////////////////////
		bool getModifier_AsBoolean( const std::string& modifier ) const;

    // DATA MEMBERS //////////////////////////////////////////////////////////
		/** Borrowed reference to arguments tuple */
		PyObject* m_args;
		/** Borrowed reference to config dictionary */
		PyObject* m_config;
};

/*@}*/
#endif /* __SPELL_PYARGS_H__ */
