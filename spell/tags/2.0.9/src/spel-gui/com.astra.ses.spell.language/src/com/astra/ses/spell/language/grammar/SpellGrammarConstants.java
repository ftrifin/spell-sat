/* Generated By:JJTree&JavaCC: Do not edit this line. SpellGrammarConstants.java */
package com.astra.ses.spell.language.grammar;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface SpellGrammarConstants
{

	/** End of File. */
	int	     EOF	               = 0;
	/** RegularExpression Id. */
	int	     SPACE	               = 1;
	/** RegularExpression Id. */
	int	     CONTINUATION	       = 4;
	/** RegularExpression Id. */
	int	     NEWLINE1	           = 5;
	/** RegularExpression Id. */
	int	     NEWLINE	           = 6;
	/** RegularExpression Id. */
	int	     NEWLINE2	           = 7;
	/** RegularExpression Id. */
	int	     CRLF1	               = 11;
	/** RegularExpression Id. */
	int	     DEDENT	               = 13;
	/** RegularExpression Id. */
	int	     INDENT	               = 14;
	/** RegularExpression Id. */
	int	     TRAILING_COMMENT	   = 15;
	/** RegularExpression Id. */
	int	     SINGLE_LINE_COMMENT	= 16;
	/** RegularExpression Id. */
	int	     LPAREN	               = 17;
	/** RegularExpression Id. */
	int	     RPAREN	               = 18;
	/** RegularExpression Id. */
	int	     LBRACE	               = 19;
	/** RegularExpression Id. */
	int	     RBRACE	               = 20;
	/** RegularExpression Id. */
	int	     LBRACKET	           = 21;
	/** RegularExpression Id. */
	int	     RBRACKET	           = 22;
	/** RegularExpression Id. */
	int	     SEMICOLON	           = 23;
	/** RegularExpression Id. */
	int	     COMMA	               = 24;
	/** RegularExpression Id. */
	int	     DOT	               = 25;
	/** RegularExpression Id. */
	int	     COLON	               = 26;
	/** RegularExpression Id. */
	int	     PLUS	               = 27;
	/** RegularExpression Id. */
	int	     MINUS	               = 28;
	/** RegularExpression Id. */
	int	     MULTIPLY	           = 29;
	/** RegularExpression Id. */
	int	     DIVIDE	               = 30;
	/** RegularExpression Id. */
	int	     FLOORDIVIDE	       = 31;
	/** RegularExpression Id. */
	int	     POWER	               = 32;
	/** RegularExpression Id. */
	int	     LSHIFT	               = 33;
	/** RegularExpression Id. */
	int	     RSHIFT	               = 34;
	/** RegularExpression Id. */
	int	     MODULO	               = 35;
	/** RegularExpression Id. */
	int	     NOT	               = 36;
	/** RegularExpression Id. */
	int	     XOR	               = 37;
	/** RegularExpression Id. */
	int	     OR	                   = 38;
	/** RegularExpression Id. */
	int	     AND	               = 39;
	/** RegularExpression Id. */
	int	     EQUAL	               = 40;
	/** RegularExpression Id. */
	int	     GREATER	           = 41;
	/** RegularExpression Id. */
	int	     LESS	               = 42;
	/** RegularExpression Id. */
	int	     EQEQUAL	           = 43;
	/** RegularExpression Id. */
	int	     EQLESS	               = 44;
	/** RegularExpression Id. */
	int	     EQGREATER	           = 45;
	/** RegularExpression Id. */
	int	     NOTEQUAL	           = 46;
	/** RegularExpression Id. */
	int	     PLUSEQ	               = 47;
	/** RegularExpression Id. */
	int	     MINUSEQ	           = 48;
	/** RegularExpression Id. */
	int	     MULTIPLYEQ	           = 49;
	/** RegularExpression Id. */
	int	     DIVIDEEQ	           = 50;
	/** RegularExpression Id. */
	int	     FLOORDIVIDEEQ	       = 51;
	/** RegularExpression Id. */
	int	     MODULOEQ	           = 52;
	/** RegularExpression Id. */
	int	     ANDEQ	               = 53;
	/** RegularExpression Id. */
	int	     OREQ	               = 54;
	/** RegularExpression Id. */
	int	     XOREQ	               = 55;
	/** RegularExpression Id. */
	int	     LSHIFTEQ	           = 56;
	/** RegularExpression Id. */
	int	     RSHIFTEQ	           = 57;
	/** RegularExpression Id. */
	int	     POWEREQ	           = 58;
	/** RegularExpression Id. */
	int	     OR_BOOL	           = 59;
	/** RegularExpression Id. */
	int	     AND_BOOL	           = 60;
	/** RegularExpression Id. */
	int	     NOT_BOOL	           = 61;
	/** RegularExpression Id. */
	int	     IS	                   = 62;
	/** RegularExpression Id. */
	int	     IN	                   = 63;
	/** RegularExpression Id. */
	int	     LAMBDA	               = 64;
	/** RegularExpression Id. */
	int	     IF	                   = 65;
	/** RegularExpression Id. */
	int	     ELSE	               = 66;
	/** RegularExpression Id. */
	int	     ELIF	               = 67;
	/** RegularExpression Id. */
	int	     WHILE	               = 68;
	/** RegularExpression Id. */
	int	     FOR	               = 69;
	/** RegularExpression Id. */
	int	     TRY	               = 70;
	/** RegularExpression Id. */
	int	     EXCEPT	               = 71;
	/** RegularExpression Id. */
	int	     DEF	               = 72;
	/** RegularExpression Id. */
	int	     CLASS	               = 73;
	/** RegularExpression Id. */
	int	     FINALLY	           = 74;
	/** RegularExpression Id. */
	int	     PASS	               = 75;
	/** RegularExpression Id. */
	int	     BREAK	               = 76;
	/** RegularExpression Id. */
	int	     CONTINUE	           = 77;
	/** RegularExpression Id. */
	int	     RETURN	               = 78;
	/** RegularExpression Id. */
	int	     YIELD	               = 79;
	/** RegularExpression Id. */
	int	     IMPORT	               = 80;
	/** RegularExpression Id. */
	int	     FROM	               = 81;
	/** RegularExpression Id. */
	int	     DEL	               = 82;
	/** RegularExpression Id. */
	int	     RAISE	               = 83;
	/** RegularExpression Id. */
	int	     GLOBAL	               = 84;
	/** RegularExpression Id. */
	int	     NONLOCAL	           = 85;
	/** RegularExpression Id. */
	int	     ASSERT	               = 86;
	/** RegularExpression Id. */
	int	     AS	                   = 87;
	/** RegularExpression Id. */
	int	     WITH	               = 88;
	/** RegularExpression Id. */
	int	     FALSE	               = 89;
	/** RegularExpression Id. */
	int	     TRUE	               = 90;
	/** RegularExpression Id. */
	int	     NONE	               = 91;
	/** RegularExpression Id. */
	int	     AT	                   = 92;
	/** RegularExpression Id. */
	int	     NAME	               = 93;
	/** RegularExpression Id. */
	int	     LETTER	               = 94;
	/** RegularExpression Id. */
	int	     DECNUMBER	           = 95;
	/** RegularExpression Id. */
	int	     HEXNUMBER	           = 96;
	/** RegularExpression Id. */
	int	     OCTNUMBER	           = 97;
	/** RegularExpression Id. */
	int	     FLOAT	               = 98;
	/** RegularExpression Id. */
	int	     COMPLEX	           = 99;
	/** RegularExpression Id. */
	int	     EXPONENT	           = 100;
	/** RegularExpression Id. */
	int	     DIGIT	               = 101;
	/** RegularExpression Id. */
	int	     SINGLE_STRING	       = 110;
	/** RegularExpression Id. */
	int	     SINGLE_STRING2	       = 111;
	/** RegularExpression Id. */
	int	     TRIPLE_STRING	       = 112;
	/** RegularExpression Id. */
	int	     TRIPLE_STRING2	       = 113;
	/** RegularExpression Id. */
	int	     SINGLE_BSTRING	       = 114;
	/** RegularExpression Id. */
	int	     SINGLE_BSTRING2	   = 115;
	/** RegularExpression Id. */
	int	     TRIPLE_BSTRING	       = 116;
	/** RegularExpression Id. */
	int	     TRIPLE_BSTRING2	   = 117;

	/** Lexical state. */
	int	     DEFAULT	           = 0;
	/** Lexical state. */
	int	     FORCE_NEWLINE1	       = 1;
	/** Lexical state. */
	int	     FORCE_NEWLINE2	       = 2;
	/** Lexical state. */
	int	     INDENTING	           = 3;
	/** Lexical state. */
	int	     INDENTATION_UNCHANGED	= 4;
	/** Lexical state. */
	int	     UNREACHABLE	       = 5;
	/** Lexical state. */
	int	     IN_STRING11	       = 6;
	/** Lexical state. */
	int	     IN_STRING21	       = 7;
	/** Lexical state. */
	int	     IN_STRING13	       = 8;
	/** Lexical state. */
	int	     IN_STRING23	       = 9;
	/** Lexical state. */
	int	     IN_BSTRING11	       = 10;
	/** Lexical state. */
	int	     IN_BSTRING21	       = 11;
	/** Lexical state. */
	int	     IN_BSTRING13	       = 12;
	/** Lexical state. */
	int	     IN_BSTRING23	       = 13;
	/** Lexical state. */
	int	     IN_STRING1NLC	       = 14;
	/** Lexical state. */
	int	     IN_STRING2NLC	       = 15;
	/** Lexical state. */
	int	     IN_BSTRING1NLC	       = 16;
	/** Lexical state. */
	int	     IN_BSTRING2NLC	       = 17;

	/** Literal token values. */
	String[]	tokenImage	       = { "<EOF>", "\" \"", "\"\\t\"", "\"\\f\"",
	        "<CONTINUATION>", "<NEWLINE1>", "<NEWLINE>", "<NEWLINE2>",
	        "\"\\t\"", "\" \"", "\"\\f\"", "<CRLF1>", "\"\"", "\"\"",
	        "\"<INDENT>\"", "<TRAILING_COMMENT>", "<SINGLE_LINE_COMMENT>",
	        "\"(\"", "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\";\"",
	        "\",\"", "\".\"", "\":\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"",
	        "\"//\"", "\"**\"", "\"<<\"", "\">>\"", "\"%\"", "\"~\"", "\"^\"",
	        "\"|\"", "\"&\"", "\"=\"", "\">\"", "\"<\"", "\"==\"", "\"<=\"",
	        "\">=\"", "\"!=\"", "\"+=\"", "\"-=\"", "\"*=\"", "\"/=\"",
	        "\"//=\"", "\"%=\"", "\"&=\"", "\"|=\"", "\"^=\"", "\"<<=\"",
	        "\">>=\"", "\"**=\"", "\"or\"", "\"and\"", "\"not\"", "\"is\"",
	        "\"in\"", "\"lambda\"", "\"if\"", "\"else\"", "\"elif\"",
	        "\"while\"", "\"for\"", "\"try\"", "\"except\"", "\"def\"",
	        "\"class\"", "\"finally\"", "\"pass\"", "\"break\"",
	        "\"continue\"", "\"return\"", "\"yield\"", "\"import\"",
	        "\"from\"", "\"del\"", "\"raise\"", "\"global\"", "\"nonlocal\"",
	        "\"assert\"", "\"as\"", "\"with\"", "\"False\"", "\"True\"",
	        "\"None\"", "\"@\"", "<NAME>", "<LETTER>", "<DECNUMBER>",
	        "<HEXNUMBER>", "<OCTNUMBER>", "<FLOAT>", "<COMPLEX>", "<EXPONENT>",
	        "<DIGIT>", "<token of kind 102>", "<token of kind 103>",
	        "<token of kind 104>", "<token of kind 105>",
	        "<token of kind 106>", "<token of kind 107>",
	        "<token of kind 108>", "<token of kind 109>", "\"\\\'\"",
	        "\"\\\"\"", "\"\\\'\\\'\\\'\"", "\"\\\"\\\"\\\"\"", "\"\\\'\"",
	        "\"\\\"\"", "\"\\\'\\\'\\\'\"", "\"\\\"\\\"\\\"\"",
	        "\"\\\\\\r\\n\"", "<token of kind 119>", "\"\\\\\\r\\n\"",
	        "<token of kind 121>", "\"\\\\\\r\\n\"", "<token of kind 123>",
	        "\"\\\\\\r\\n\"", "<token of kind 125>", "\"\"", "\"\"", "\"\"",
	        "\"\"", "<token of kind 130>", "<token of kind 131>", "\"\\r\\n\"",
	        "\"\\n\"", "\"\\r\"", "<token of kind 135>", "<token of kind 136>", };

}
